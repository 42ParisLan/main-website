/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/auth/callback": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * OAuth2 Callback
         * @description This endpoint is used to handle the OAuth2 callback from the OAuth2 provider.
         *     		It should exchange the code for an access token and return a generated TokenSet.
         *     		⚠️ **You are probably not interested in this endpoint as it is should be only used by the frontend**.
         */
        get: operations["getOAuthCallback"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/logout": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Logout
         * @description This endpoint is used to log out the user.
         *     		It should clear the auth cookie and invalidate the session.
         *     		⚠️ **You are probably not interested in this endpoint as it is should be only used by the frontend**
         */
        get: operations["logout"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/components/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * DELETE Component
         * @description This endpoint is used to delete a component.
         */
        delete: operations["deleteComponent"];
        options?: never;
        head?: never;
        /**
         * Update Component
         * @description This endpoint is used to update a component.
         */
        patch: operations["updateComponent"];
        trace?: never;
    };
    "/env": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Frontend Env Vars
         * @description Returns frontend environment variables needed for OAuth
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["EnvResponse"];
                    };
                };
                /** @description Error */
                default: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/problem+json": components["schemas"]["ErrorModel"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/me": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get current user
         * @description This endpoint is used to get the current user.
         */
        get: operations["getCurrentUser"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/me/permissions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get current user RBAC permissions
         * @description This endpoint is used to get the current user RBAC permissions.
         */
        get: operations["getCurrentUserRBACPermissions"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/roles": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get roles
         * @description This endpoint is used to get the roles.
         */
        get: operations["getRoles"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Search Users
         * @description This endpoint is used to search users.
         */
        get: operations["searchUsers"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users/{id_or_login}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get User by ID or Login
         * @description This endpoint is used to get a user by its ID or login.
         */
        get: operations["getUserByIDOrLogin"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users/{id}/permissions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get user RBAC permissions
         * @description This endpoint is used to get the user RBAC permissions.
         */
        get: operations["getUserRBACPermissions"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users/{id}/roles": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Change user roles
         * @description This endpoint is used to change user roles.
         */
        post: operations["changeUserRoles"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/votes": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get All Votes
         * @description This endpoint is used to get all votes.
         */
        get: operations["getAllVotes"];
        put?: never;
        /**
         * Create Vote
         * @description This endpoint is used to create a vote.
         */
        post: operations["createVote"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/votes/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Vote by ID
         * @description This endpoint is used to get a vote.
         */
        get: operations["getVoteByID"];
        put?: never;
        post?: never;
        /**
         * Delete Vote
         * @description This endpoint is used to delete a vote.
         */
        delete: operations["deleteVote"];
        options?: never;
        head?: never;
        /**
         * Update Vote
         * @description This endpoint is used to update a vote.
         */
        patch: operations["updateVote"];
        trace?: never;
    };
    "/votes/{id}/components": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create Component
         * @description This endpoint is used to create a component for a vote.
         */
        post: operations["createComponent"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/votes/{id}/results": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Vote results
         * @description This endpoint is used to get vote results.
         */
        get: operations["getResults"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/votes/{id}/submit": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Submit Vote
         * @description This endpoint is used to submit a vote.
         */
        post: operations["submitVote"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        Component: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             * @example /api/schemas/Component.json
             */
            readonly $schema?: string;
            /** @example #FF5733 */
            color: string;
            /** @example Network infrastructure and connectivity */
            description: string;
            /**
             * Format: int64
             * @example 1
             */
            id: number;
            /** @example https://example.com/network.png */
            image_url: string;
            /** @example Network */
            name: string;
        };
        ComponentResult: {
            /**
             * Format: int64
             * @example 1
             */
            component_id: number;
            /** @example Go */
            name: string;
            /**
             * Format: int64
             * @example 120
             */
            votes: number;
        };
        CreateComponent: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             * @example /api/schemas/CreateComponent.json
             */
            readonly $schema?: string;
            /** @example #FF5733 */
            color: string;
            /** @example Network infrastructure and connectivity */
            description: string;
            /** @example https://example.com/network.png */
            image_url: string;
            /** @example Network */
            name: string;
        };
        CreateVote: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             * @example /api/schemas/CreateVote.json
             */
            readonly $schema?: string;
            /** @example Vote for your favorite language! */
            description: string;
            /**
             * Format: date-time
             * @example 2025-10-20T23:59:59Z
             */
            end_at: string;
            /**
             * Format: date-time
             * @example 2025-10-10T00:00:00Z
             */
            start_at: string;
            /** @example Best Programming Language 2025 */
            title: string;
            /** @example true */
            visible: boolean;
        };
        EnvResponse: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             * @example /api/schemas/EnvResponse.json
             */
            readonly $schema?: string;
            VITE_OAUTH_AUTHORIZE_URL: string;
            VITE_OAUTH_CLIENT_ID: string;
        };
        ErrorDetail: {
            /** @description Where the error occurred, e.g. 'body.items[3].tags' or 'path.thing-id' */
            location?: string;
            /** @description Error message text */
            message?: string;
            /** @description The value at the given location */
            value?: unknown;
        };
        ErrorModel: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             * @example /api/schemas/ErrorModel.json
             */
            readonly $schema?: string;
            /**
             * @description A human-readable explanation specific to this occurrence of the problem.
             * @example Property foo is required but is missing.
             */
            detail?: string;
            /** @description Optional list of individual error details */
            errors?: components["schemas"]["ErrorDetail"][] | null;
            /**
             * Format: uri
             * @description A URI reference that identifies the specific occurrence of the problem.
             * @example https://example.com/error-log/abc123
             */
            instance?: string;
            /**
             * Format: int64
             * @description HTTP status code
             * @example 400
             */
            status?: number;
            /**
             * @description A short, human-readable summary of the problem type. This value should not change between occurrences of the error.
             * @example Bad Request
             */
            title?: string;
            /**
             * Format: uri
             * @description A URI reference to human-readable documentation for the error.
             * @default about:blank
             * @example https://example.com/errors/example
             */
            type: string;
        };
        LightUser: {
            /**
             * Format: date-time
             * @example 2024-01-01T00:00:00Z
             */
            created_at: string;
            /** @example froz@42paris.fr */
            email: string;
            /** @example Theo */
            first_name: string;
            /**
             * Format: int64
             * @example 42
             */
            id: number;
            /**
             * @example user
             * @enum {string}
             */
            kind: "user" | "admin";
            /** @example Matis */
            last_name: string;
            /** @example https://upload.wikimedia.org/wikipedia/commons/thumb/e/e5/Rick_Astley-cropped.jpg/220px-Rick_Astley-cropped.jpg */
            picture: string | null;
            /**
             * @example [
             *       "user"
             *     ]
             */
            roles: string[];
            /**
             * Format: date-time
             * @example 2024-01-01T00:00:00Z
             */
            updated_at: string;
            /** @example froz */
            username: string;
            /** @example Theo */
            usual_first_name: string | null;
            /** @example Theo Matis */
            usual_full_name: string;
        };
        LightVote: {
            /**
             * Format: int64
             * @example 4
             */
            components_count: number;
            /**
             * Format: date-time
             * @example 2025-10-01T12:00:00Z
             */
            created_at: string;
            /** @example Vote for your favorite language! */
            description: string;
            /**
             * Format: date-time
             * @example 2025-10-20T23:59:59Z
             */
            end_at: string;
            /**
             * Format: int64
             * @example 1
             */
            id: number;
            /**
             * Format: date-time
             * @example 2025-10-10T00:00:00Z
             */
            start_at: string;
            /** @example Best Programming Language 2025 */
            title: string;
            /** @example true */
            visible: boolean;
        };
        Permission: {
            /**
             * @example [
             *       "GET"
             *     ]
             */
            methods: string[];
            /** @example /users */
            path: string;
        };
        ResultsResponse: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             * @example /api/schemas/ResultsResponse.json
             */
            readonly $schema?: string;
            results: components["schemas"]["ComponentResult"][] | null;
            /**
             * Format: int64
             * @example 290
             */
            total_votes: number;
            /**
             * Format: int64
             * @example 1
             */
            vote_id: number;
        };
        Role: {
            /** @example admin role */
            description: string;
            /**
             * @example [
             *       "admin role inherits"
             *     ]
             */
            inherits: string[];
            /** @example admin */
            name: string;
            permissions: components["schemas"]["Permission"][];
        };
        UpdateComponent: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             * @example /api/schemas/UpdateComponent.json
             */
            readonly $schema?: string;
            /** @example #FF5733 */
            color: string;
            /** @example Network infrastructure and connectivity */
            description: string;
            /** @example https://example.com/network.png */
            image_url: string;
            /** @example Network */
            name: string;
        };
        UpdateVote: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             * @example /api/schemas/UpdateVote.json
             */
            readonly $schema?: string;
            /** @example Vote for your favorite language! */
            description: string;
            /**
             * Format: date-time
             * @example 2025-10-20T23:59:59Z
             */
            end_at: string;
            /**
             * Format: date-time
             * @example 2025-10-10T00:00:00Z
             */
            start_at: string;
            /** @example Best Programming Language 2025 */
            title: string;
            /** @example true */
            visible: boolean | null;
        };
        User: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             * @example /api/schemas/User.json
             */
            readonly $schema?: string;
            /**
             * Format: date-time
             * @example 2024-01-01T00:00:00Z
             */
            created_at: string;
            /** @example froz@42paris.fr */
            email: string;
            /** @example Theo */
            first_name: string;
            /**
             * Format: int64
             * @example 42
             */
            id: number;
            /**
             * @example user
             * @enum {string}
             */
            kind: "user" | "admin";
            /** @example Matis */
            last_name: string;
            /** @example https://upload.wikimedia.org/wikipedia/commons/thumb/e/e5/Rick_Astley-cropped.jpg/220px-Rick_Astley-cropped.jpg */
            picture: string | null;
            /**
             * @example [
             *       "user"
             *     ]
             */
            roles: string[];
            /**
             * Format: date-time
             * @example 2024-01-01T00:00:00Z
             */
            updated_at: string;
            /** @example froz */
            username: string;
            /** @example Theo */
            usual_first_name: string | null;
            /** @example Theo Matis */
            usual_full_name: string;
        };
        Vote: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             * @example /api/schemas/Vote.json
             */
            readonly $schema?: string;
            components: components["schemas"]["Component"][] | null;
            /** @example Vote for your favorite language! */
            description: string;
            /**
             * Format: date-time
             * @example 2025-10-20T23:59:59Z
             */
            end_at: string;
            /**
             * Format: int64
             * @example 1
             */
            id: number;
            /**
             * Format: date-time
             * @example 2025-10-10T00:00:00Z
             */
            start_at: string;
            /** @example Best Programming Language 2025 */
            title: string;
            /** @example true */
            visible: boolean;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    getOAuthCallback: {
        parameters: {
            query: {
                /**
                 * @description The OAuth2 code to exchange for a token
                 * @example 123456
                 */
                code: string;
                /**
                 * @description The redirect URI to use for the OAuth2 callback
                 * @example http://localhost:8080/auth/callback
                 */
                redirect_uri?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No Content */
            204: {
                headers: {
                    "Set-Cookie"?: string;
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    logout: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No Content */
            204: {
                headers: {
                    "Set-Cookie"?: string;
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    deleteComponent: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @example 42 */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    updateComponent: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @example 42 */
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateComponent"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Component"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    getCurrentUser: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["User"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    getCurrentUserRBACPermissions: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Permission"][];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    getRoles: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Role"][];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    searchUsers: {
        parameters: {
            query?: {
                /** @example froz */
                query?: string;
                /** @example 0 */
                page?: number;
                /** @example 10 */
                limit?: number;
                /** @example asc */
                order?: "asc" | "desc";
                /** @example user */
                kind?: "user" | "admin";
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    "X-Total"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["LightUser"][];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    getUserByIDOrLogin: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @example froz */
                id_or_login: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["User"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    getUserRBACPermissions: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @example 1 */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Permission"][];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    changeUserRoles: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @example 42 */
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": string[] | null;
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["User"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    getAllVotes: {
        parameters: {
            query?: {
                /** @example 0 */
                page?: number;
                /** @example 10 */
                limit?: number;
                /** @example asc */
                order?: "asc" | "desc";
                /** @example visible */
                visible?: "all" | "visible";
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    "X-Total"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["LightVote"][];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    createVote: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateVote"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Vote"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    getVoteByID: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @example 42 */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Vote"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    deleteVote: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @example 42 */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    updateVote: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @example 42 */
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateVote"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Vote"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    createComponent: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateComponent"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Component"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    getResults: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @example 42 */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResultsResponse"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    submitVote: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @example 42 */
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": number;
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
}
