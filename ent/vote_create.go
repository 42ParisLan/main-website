// Code generated by ent, DO NOT EDIT.

package ent

import (
	"base-website/ent/component"
	"base-website/ent/vote"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// VoteCreate is the builder for creating a Vote entity.
type VoteCreate struct {
	config
	mutation *VoteMutation
	hooks    []Hook
}

// SetTitle sets the "title" field.
func (_c *VoteCreate) SetTitle(v string) *VoteCreate {
	_c.mutation.SetTitle(v)
	return _c
}

// SetDescription sets the "description" field.
func (_c *VoteCreate) SetDescription(v string) *VoteCreate {
	_c.mutation.SetDescription(v)
	return _c
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (_c *VoteCreate) SetNillableDescription(v *string) *VoteCreate {
	if v != nil {
		_c.SetDescription(*v)
	}
	return _c
}

// SetVisible sets the "visible" field.
func (_c *VoteCreate) SetVisible(v bool) *VoteCreate {
	_c.mutation.SetVisible(v)
	return _c
}

// SetNillableVisible sets the "visible" field if the given value is not nil.
func (_c *VoteCreate) SetNillableVisible(v *bool) *VoteCreate {
	if v != nil {
		_c.SetVisible(*v)
	}
	return _c
}

// SetStartAt sets the "start_at" field.
func (_c *VoteCreate) SetStartAt(v time.Time) *VoteCreate {
	_c.mutation.SetStartAt(v)
	return _c
}

// SetEndAt sets the "end_at" field.
func (_c *VoteCreate) SetEndAt(v time.Time) *VoteCreate {
	_c.mutation.SetEndAt(v)
	return _c
}

// SetCreatedAt sets the "created_at" field.
func (_c *VoteCreate) SetCreatedAt(v time.Time) *VoteCreate {
	_c.mutation.SetCreatedAt(v)
	return _c
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (_c *VoteCreate) SetNillableCreatedAt(v *time.Time) *VoteCreate {
	if v != nil {
		_c.SetCreatedAt(*v)
	}
	return _c
}

// SetUpdatedAt sets the "updated_at" field.
func (_c *VoteCreate) SetUpdatedAt(v time.Time) *VoteCreate {
	_c.mutation.SetUpdatedAt(v)
	return _c
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (_c *VoteCreate) SetNillableUpdatedAt(v *time.Time) *VoteCreate {
	if v != nil {
		_c.SetUpdatedAt(*v)
	}
	return _c
}

// AddComponentIDs adds the "components" edge to the Component entity by IDs.
func (_c *VoteCreate) AddComponentIDs(ids ...int) *VoteCreate {
	_c.mutation.AddComponentIDs(ids...)
	return _c
}

// AddComponents adds the "components" edges to the Component entity.
func (_c *VoteCreate) AddComponents(v ...*Component) *VoteCreate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddComponentIDs(ids...)
}

// Mutation returns the VoteMutation object of the builder.
func (_c *VoteCreate) Mutation() *VoteMutation {
	return _c.mutation
}

// Save creates the Vote in the database.
func (_c *VoteCreate) Save(ctx context.Context) (*Vote, error) {
	_c.defaults()
	return withHooks(ctx, _c.sqlSave, _c.mutation, _c.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (_c *VoteCreate) SaveX(ctx context.Context) *Vote {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *VoteCreate) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *VoteCreate) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_c *VoteCreate) defaults() {
	if _, ok := _c.mutation.Visible(); !ok {
		v := vote.DefaultVisible
		_c.mutation.SetVisible(v)
	}
	if _, ok := _c.mutation.CreatedAt(); !ok {
		v := vote.DefaultCreatedAt()
		_c.mutation.SetCreatedAt(v)
	}
	if _, ok := _c.mutation.UpdatedAt(); !ok {
		v := vote.DefaultUpdatedAt()
		_c.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_c *VoteCreate) check() error {
	if _, ok := _c.mutation.Title(); !ok {
		return &ValidationError{Name: "title", err: errors.New(`ent: missing required field "Vote.title"`)}
	}
	if _, ok := _c.mutation.Visible(); !ok {
		return &ValidationError{Name: "visible", err: errors.New(`ent: missing required field "Vote.visible"`)}
	}
	if _, ok := _c.mutation.StartAt(); !ok {
		return &ValidationError{Name: "start_at", err: errors.New(`ent: missing required field "Vote.start_at"`)}
	}
	if _, ok := _c.mutation.EndAt(); !ok {
		return &ValidationError{Name: "end_at", err: errors.New(`ent: missing required field "Vote.end_at"`)}
	}
	if _, ok := _c.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Vote.created_at"`)}
	}
	if _, ok := _c.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Vote.updated_at"`)}
	}
	return nil
}

func (_c *VoteCreate) sqlSave(ctx context.Context) (*Vote, error) {
	if err := _c.check(); err != nil {
		return nil, err
	}
	_node, _spec := _c.createSpec()
	if err := sqlgraph.CreateNode(ctx, _c.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	_c.mutation.id = &_node.ID
	_c.mutation.done = true
	return _node, nil
}

func (_c *VoteCreate) createSpec() (*Vote, *sqlgraph.CreateSpec) {
	var (
		_node = &Vote{config: _c.config}
		_spec = sqlgraph.NewCreateSpec(vote.Table, sqlgraph.NewFieldSpec(vote.FieldID, field.TypeInt))
	)
	if value, ok := _c.mutation.Title(); ok {
		_spec.SetField(vote.FieldTitle, field.TypeString, value)
		_node.Title = value
	}
	if value, ok := _c.mutation.Description(); ok {
		_spec.SetField(vote.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := _c.mutation.Visible(); ok {
		_spec.SetField(vote.FieldVisible, field.TypeBool, value)
		_node.Visible = value
	}
	if value, ok := _c.mutation.StartAt(); ok {
		_spec.SetField(vote.FieldStartAt, field.TypeTime, value)
		_node.StartAt = value
	}
	if value, ok := _c.mutation.EndAt(); ok {
		_spec.SetField(vote.FieldEndAt, field.TypeTime, value)
		_node.EndAt = value
	}
	if value, ok := _c.mutation.CreatedAt(); ok {
		_spec.SetField(vote.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := _c.mutation.UpdatedAt(); ok {
		_spec.SetField(vote.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if nodes := _c.mutation.ComponentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   vote.ComponentsTable,
			Columns: []string{vote.ComponentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(component.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// VoteCreateBulk is the builder for creating many Vote entities in bulk.
type VoteCreateBulk struct {
	config
	err      error
	builders []*VoteCreate
}

// Save creates the Vote entities in the database.
func (_c *VoteCreateBulk) Save(ctx context.Context) ([]*Vote, error) {
	if _c.err != nil {
		return nil, _c.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(_c.builders))
	nodes := make([]*Vote, len(_c.builders))
	mutators := make([]Mutator, len(_c.builders))
	for i := range _c.builders {
		func(i int, root context.Context) {
			builder := _c.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*VoteMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, _c.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, _c.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, _c.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (_c *VoteCreateBulk) SaveX(ctx context.Context) []*Vote {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *VoteCreateBulk) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *VoteCreateBulk) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}
