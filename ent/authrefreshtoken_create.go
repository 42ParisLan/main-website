// Code generated by ent, DO NOT EDIT.

package ent

import (
	"base-website/ent/authrefreshtoken"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// AuthRefreshTokenCreate is the builder for creating a AuthRefreshToken entity.
type AuthRefreshTokenCreate struct {
	config
	mutation *AuthRefreshTokenMutation
	hooks    []Hook
}

// SetToken sets the "Token" field.
func (_c *AuthRefreshTokenCreate) SetToken(v string) *AuthRefreshTokenCreate {
	_c.mutation.SetToken(v)
	return _c
}

// SetSubject sets the "subject" field.
func (_c *AuthRefreshTokenCreate) SetSubject(v string) *AuthRefreshTokenCreate {
	_c.mutation.SetSubject(v)
	return _c
}

// SetAuthTime sets the "auth_time" field.
func (_c *AuthRefreshTokenCreate) SetAuthTime(v time.Time) *AuthRefreshTokenCreate {
	_c.mutation.SetAuthTime(v)
	return _c
}

// SetAmr sets the "amr" field.
func (_c *AuthRefreshTokenCreate) SetAmr(v []string) *AuthRefreshTokenCreate {
	_c.mutation.SetAmr(v)
	return _c
}

// SetAudience sets the "audience" field.
func (_c *AuthRefreshTokenCreate) SetAudience(v []string) *AuthRefreshTokenCreate {
	_c.mutation.SetAudience(v)
	return _c
}

// SetUserID sets the "user_id" field.
func (_c *AuthRefreshTokenCreate) SetUserID(v string) *AuthRefreshTokenCreate {
	_c.mutation.SetUserID(v)
	return _c
}

// SetApplicationID sets the "application_id" field.
func (_c *AuthRefreshTokenCreate) SetApplicationID(v string) *AuthRefreshTokenCreate {
	_c.mutation.SetApplicationID(v)
	return _c
}

// SetExpiration sets the "expiration" field.
func (_c *AuthRefreshTokenCreate) SetExpiration(v time.Time) *AuthRefreshTokenCreate {
	_c.mutation.SetExpiration(v)
	return _c
}

// SetScopes sets the "scopes" field.
func (_c *AuthRefreshTokenCreate) SetScopes(v []string) *AuthRefreshTokenCreate {
	_c.mutation.SetScopes(v)
	return _c
}

// SetID sets the "id" field.
func (_c *AuthRefreshTokenCreate) SetID(v string) *AuthRefreshTokenCreate {
	_c.mutation.SetID(v)
	return _c
}

// Mutation returns the AuthRefreshTokenMutation object of the builder.
func (_c *AuthRefreshTokenCreate) Mutation() *AuthRefreshTokenMutation {
	return _c.mutation
}

// Save creates the AuthRefreshToken in the database.
func (_c *AuthRefreshTokenCreate) Save(ctx context.Context) (*AuthRefreshToken, error) {
	return withHooks(ctx, _c.sqlSave, _c.mutation, _c.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (_c *AuthRefreshTokenCreate) SaveX(ctx context.Context) *AuthRefreshToken {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *AuthRefreshTokenCreate) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *AuthRefreshTokenCreate) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_c *AuthRefreshTokenCreate) check() error {
	if _, ok := _c.mutation.Token(); !ok {
		return &ValidationError{Name: "Token", err: errors.New(`ent: missing required field "AuthRefreshToken.Token"`)}
	}
	if _, ok := _c.mutation.Subject(); !ok {
		return &ValidationError{Name: "subject", err: errors.New(`ent: missing required field "AuthRefreshToken.subject"`)}
	}
	if _, ok := _c.mutation.AuthTime(); !ok {
		return &ValidationError{Name: "auth_time", err: errors.New(`ent: missing required field "AuthRefreshToken.auth_time"`)}
	}
	if _, ok := _c.mutation.Amr(); !ok {
		return &ValidationError{Name: "amr", err: errors.New(`ent: missing required field "AuthRefreshToken.amr"`)}
	}
	if _, ok := _c.mutation.Audience(); !ok {
		return &ValidationError{Name: "audience", err: errors.New(`ent: missing required field "AuthRefreshToken.audience"`)}
	}
	if _, ok := _c.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New(`ent: missing required field "AuthRefreshToken.user_id"`)}
	}
	if _, ok := _c.mutation.ApplicationID(); !ok {
		return &ValidationError{Name: "application_id", err: errors.New(`ent: missing required field "AuthRefreshToken.application_id"`)}
	}
	if _, ok := _c.mutation.Expiration(); !ok {
		return &ValidationError{Name: "expiration", err: errors.New(`ent: missing required field "AuthRefreshToken.expiration"`)}
	}
	if _, ok := _c.mutation.Scopes(); !ok {
		return &ValidationError{Name: "scopes", err: errors.New(`ent: missing required field "AuthRefreshToken.scopes"`)}
	}
	return nil
}

func (_c *AuthRefreshTokenCreate) sqlSave(ctx context.Context) (*AuthRefreshToken, error) {
	if err := _c.check(); err != nil {
		return nil, err
	}
	_node, _spec := _c.createSpec()
	if err := sqlgraph.CreateNode(ctx, _c.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected AuthRefreshToken.ID type: %T", _spec.ID.Value)
		}
	}
	_c.mutation.id = &_node.ID
	_c.mutation.done = true
	return _node, nil
}

func (_c *AuthRefreshTokenCreate) createSpec() (*AuthRefreshToken, *sqlgraph.CreateSpec) {
	var (
		_node = &AuthRefreshToken{config: _c.config}
		_spec = sqlgraph.NewCreateSpec(authrefreshtoken.Table, sqlgraph.NewFieldSpec(authrefreshtoken.FieldID, field.TypeString))
	)
	if id, ok := _c.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := _c.mutation.Token(); ok {
		_spec.SetField(authrefreshtoken.FieldToken, field.TypeString, value)
		_node.Token = value
	}
	if value, ok := _c.mutation.Subject(); ok {
		_spec.SetField(authrefreshtoken.FieldSubject, field.TypeString, value)
		_node.Subject = value
	}
	if value, ok := _c.mutation.AuthTime(); ok {
		_spec.SetField(authrefreshtoken.FieldAuthTime, field.TypeTime, value)
		_node.AuthTime = value
	}
	if value, ok := _c.mutation.Amr(); ok {
		_spec.SetField(authrefreshtoken.FieldAmr, field.TypeJSON, value)
		_node.Amr = value
	}
	if value, ok := _c.mutation.Audience(); ok {
		_spec.SetField(authrefreshtoken.FieldAudience, field.TypeJSON, value)
		_node.Audience = value
	}
	if value, ok := _c.mutation.UserID(); ok {
		_spec.SetField(authrefreshtoken.FieldUserID, field.TypeString, value)
		_node.UserID = value
	}
	if value, ok := _c.mutation.ApplicationID(); ok {
		_spec.SetField(authrefreshtoken.FieldApplicationID, field.TypeString, value)
		_node.ApplicationID = value
	}
	if value, ok := _c.mutation.Expiration(); ok {
		_spec.SetField(authrefreshtoken.FieldExpiration, field.TypeTime, value)
		_node.Expiration = value
	}
	if value, ok := _c.mutation.Scopes(); ok {
		_spec.SetField(authrefreshtoken.FieldScopes, field.TypeJSON, value)
		_node.Scopes = value
	}
	return _node, _spec
}

// AuthRefreshTokenCreateBulk is the builder for creating many AuthRefreshToken entities in bulk.
type AuthRefreshTokenCreateBulk struct {
	config
	err      error
	builders []*AuthRefreshTokenCreate
}

// Save creates the AuthRefreshToken entities in the database.
func (_c *AuthRefreshTokenCreateBulk) Save(ctx context.Context) ([]*AuthRefreshToken, error) {
	if _c.err != nil {
		return nil, _c.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(_c.builders))
	nodes := make([]*AuthRefreshToken, len(_c.builders))
	mutators := make([]Mutator, len(_c.builders))
	for i := range _c.builders {
		func(i int, root context.Context) {
			builder := _c.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*AuthRefreshTokenMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, _c.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, _c.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, _c.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (_c *AuthRefreshTokenCreateBulk) SaveX(ctx context.Context) []*AuthRefreshToken {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *AuthRefreshTokenCreateBulk) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *AuthRefreshTokenCreateBulk) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}
