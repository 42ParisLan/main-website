// Code generated by ent, DO NOT EDIT.

package authrefreshtoken

import (
	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the authrefreshtoken type in the database.
	Label = "auth_refresh_token"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldToken holds the string denoting the token field in the database.
	FieldToken = "token"
	// FieldSubject holds the string denoting the subject field in the database.
	FieldSubject = "subject"
	// FieldAuthTime holds the string denoting the auth_time field in the database.
	FieldAuthTime = "auth_time"
	// FieldAmr holds the string denoting the amr field in the database.
	FieldAmr = "amr"
	// FieldAudience holds the string denoting the audience field in the database.
	FieldAudience = "audience"
	// FieldUserID holds the string denoting the user_id field in the database.
	FieldUserID = "user_id"
	// FieldApplicationID holds the string denoting the application_id field in the database.
	FieldApplicationID = "application_id"
	// FieldExpiration holds the string denoting the expiration field in the database.
	FieldExpiration = "expiration"
	// FieldScopes holds the string denoting the scopes field in the database.
	FieldScopes = "scopes"
	// Table holds the table name of the authrefreshtoken in the database.
	Table = "auth_refresh_tokens"
)

// Columns holds all SQL columns for authrefreshtoken fields.
var Columns = []string{
	FieldID,
	FieldToken,
	FieldSubject,
	FieldAuthTime,
	FieldAmr,
	FieldAudience,
	FieldUserID,
	FieldApplicationID,
	FieldExpiration,
	FieldScopes,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the AuthRefreshToken queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByToken orders the results by the Token field.
func ByToken(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldToken, opts...).ToFunc()
}

// BySubject orders the results by the subject field.
func BySubject(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSubject, opts...).ToFunc()
}

// ByAuthTime orders the results by the auth_time field.
func ByAuthTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAuthTime, opts...).ToFunc()
}

// ByUserID orders the results by the user_id field.
func ByUserID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUserID, opts...).ToFunc()
}

// ByApplicationID orders the results by the application_id field.
func ByApplicationID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldApplicationID, opts...).ToFunc()
}

// ByExpiration orders the results by the expiration field.
func ByExpiration(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldExpiration, opts...).ToFunc()
}
