// Code generated by ent, DO NOT EDIT.

package ent

import (
	"base-website/ent/authrefreshtoken"
	"base-website/ent/predicate"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
)

// AuthRefreshTokenUpdate is the builder for updating AuthRefreshToken entities.
type AuthRefreshTokenUpdate struct {
	config
	hooks    []Hook
	mutation *AuthRefreshTokenMutation
}

// Where appends a list predicates to the AuthRefreshTokenUpdate builder.
func (_u *AuthRefreshTokenUpdate) Where(ps ...predicate.AuthRefreshToken) *AuthRefreshTokenUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetToken sets the "Token" field.
func (_u *AuthRefreshTokenUpdate) SetToken(v string) *AuthRefreshTokenUpdate {
	_u.mutation.SetToken(v)
	return _u
}

// SetNillableToken sets the "Token" field if the given value is not nil.
func (_u *AuthRefreshTokenUpdate) SetNillableToken(v *string) *AuthRefreshTokenUpdate {
	if v != nil {
		_u.SetToken(*v)
	}
	return _u
}

// SetSubject sets the "subject" field.
func (_u *AuthRefreshTokenUpdate) SetSubject(v string) *AuthRefreshTokenUpdate {
	_u.mutation.SetSubject(v)
	return _u
}

// SetNillableSubject sets the "subject" field if the given value is not nil.
func (_u *AuthRefreshTokenUpdate) SetNillableSubject(v *string) *AuthRefreshTokenUpdate {
	if v != nil {
		_u.SetSubject(*v)
	}
	return _u
}

// SetAuthTime sets the "auth_time" field.
func (_u *AuthRefreshTokenUpdate) SetAuthTime(v time.Time) *AuthRefreshTokenUpdate {
	_u.mutation.SetAuthTime(v)
	return _u
}

// SetNillableAuthTime sets the "auth_time" field if the given value is not nil.
func (_u *AuthRefreshTokenUpdate) SetNillableAuthTime(v *time.Time) *AuthRefreshTokenUpdate {
	if v != nil {
		_u.SetAuthTime(*v)
	}
	return _u
}

// SetAmr sets the "amr" field.
func (_u *AuthRefreshTokenUpdate) SetAmr(v []string) *AuthRefreshTokenUpdate {
	_u.mutation.SetAmr(v)
	return _u
}

// AppendAmr appends value to the "amr" field.
func (_u *AuthRefreshTokenUpdate) AppendAmr(v []string) *AuthRefreshTokenUpdate {
	_u.mutation.AppendAmr(v)
	return _u
}

// SetAudience sets the "audience" field.
func (_u *AuthRefreshTokenUpdate) SetAudience(v []string) *AuthRefreshTokenUpdate {
	_u.mutation.SetAudience(v)
	return _u
}

// AppendAudience appends value to the "audience" field.
func (_u *AuthRefreshTokenUpdate) AppendAudience(v []string) *AuthRefreshTokenUpdate {
	_u.mutation.AppendAudience(v)
	return _u
}

// SetUserID sets the "user_id" field.
func (_u *AuthRefreshTokenUpdate) SetUserID(v string) *AuthRefreshTokenUpdate {
	_u.mutation.SetUserID(v)
	return _u
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (_u *AuthRefreshTokenUpdate) SetNillableUserID(v *string) *AuthRefreshTokenUpdate {
	if v != nil {
		_u.SetUserID(*v)
	}
	return _u
}

// SetApplicationID sets the "application_id" field.
func (_u *AuthRefreshTokenUpdate) SetApplicationID(v string) *AuthRefreshTokenUpdate {
	_u.mutation.SetApplicationID(v)
	return _u
}

// SetNillableApplicationID sets the "application_id" field if the given value is not nil.
func (_u *AuthRefreshTokenUpdate) SetNillableApplicationID(v *string) *AuthRefreshTokenUpdate {
	if v != nil {
		_u.SetApplicationID(*v)
	}
	return _u
}

// SetExpiration sets the "expiration" field.
func (_u *AuthRefreshTokenUpdate) SetExpiration(v time.Time) *AuthRefreshTokenUpdate {
	_u.mutation.SetExpiration(v)
	return _u
}

// SetNillableExpiration sets the "expiration" field if the given value is not nil.
func (_u *AuthRefreshTokenUpdate) SetNillableExpiration(v *time.Time) *AuthRefreshTokenUpdate {
	if v != nil {
		_u.SetExpiration(*v)
	}
	return _u
}

// SetScopes sets the "scopes" field.
func (_u *AuthRefreshTokenUpdate) SetScopes(v []string) *AuthRefreshTokenUpdate {
	_u.mutation.SetScopes(v)
	return _u
}

// AppendScopes appends value to the "scopes" field.
func (_u *AuthRefreshTokenUpdate) AppendScopes(v []string) *AuthRefreshTokenUpdate {
	_u.mutation.AppendScopes(v)
	return _u
}

// Mutation returns the AuthRefreshTokenMutation object of the builder.
func (_u *AuthRefreshTokenUpdate) Mutation() *AuthRefreshTokenMutation {
	return _u.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *AuthRefreshTokenUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *AuthRefreshTokenUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *AuthRefreshTokenUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *AuthRefreshTokenUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

func (_u *AuthRefreshTokenUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	_spec := sqlgraph.NewUpdateSpec(authrefreshtoken.Table, authrefreshtoken.Columns, sqlgraph.NewFieldSpec(authrefreshtoken.FieldID, field.TypeString))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.Token(); ok {
		_spec.SetField(authrefreshtoken.FieldToken, field.TypeString, value)
	}
	if value, ok := _u.mutation.Subject(); ok {
		_spec.SetField(authrefreshtoken.FieldSubject, field.TypeString, value)
	}
	if value, ok := _u.mutation.AuthTime(); ok {
		_spec.SetField(authrefreshtoken.FieldAuthTime, field.TypeTime, value)
	}
	if value, ok := _u.mutation.Amr(); ok {
		_spec.SetField(authrefreshtoken.FieldAmr, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedAmr(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, authrefreshtoken.FieldAmr, value)
		})
	}
	if value, ok := _u.mutation.Audience(); ok {
		_spec.SetField(authrefreshtoken.FieldAudience, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedAudience(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, authrefreshtoken.FieldAudience, value)
		})
	}
	if value, ok := _u.mutation.UserID(); ok {
		_spec.SetField(authrefreshtoken.FieldUserID, field.TypeString, value)
	}
	if value, ok := _u.mutation.ApplicationID(); ok {
		_spec.SetField(authrefreshtoken.FieldApplicationID, field.TypeString, value)
	}
	if value, ok := _u.mutation.Expiration(); ok {
		_spec.SetField(authrefreshtoken.FieldExpiration, field.TypeTime, value)
	}
	if value, ok := _u.mutation.Scopes(); ok {
		_spec.SetField(authrefreshtoken.FieldScopes, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedScopes(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, authrefreshtoken.FieldScopes, value)
		})
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{authrefreshtoken.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// AuthRefreshTokenUpdateOne is the builder for updating a single AuthRefreshToken entity.
type AuthRefreshTokenUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *AuthRefreshTokenMutation
}

// SetToken sets the "Token" field.
func (_u *AuthRefreshTokenUpdateOne) SetToken(v string) *AuthRefreshTokenUpdateOne {
	_u.mutation.SetToken(v)
	return _u
}

// SetNillableToken sets the "Token" field if the given value is not nil.
func (_u *AuthRefreshTokenUpdateOne) SetNillableToken(v *string) *AuthRefreshTokenUpdateOne {
	if v != nil {
		_u.SetToken(*v)
	}
	return _u
}

// SetSubject sets the "subject" field.
func (_u *AuthRefreshTokenUpdateOne) SetSubject(v string) *AuthRefreshTokenUpdateOne {
	_u.mutation.SetSubject(v)
	return _u
}

// SetNillableSubject sets the "subject" field if the given value is not nil.
func (_u *AuthRefreshTokenUpdateOne) SetNillableSubject(v *string) *AuthRefreshTokenUpdateOne {
	if v != nil {
		_u.SetSubject(*v)
	}
	return _u
}

// SetAuthTime sets the "auth_time" field.
func (_u *AuthRefreshTokenUpdateOne) SetAuthTime(v time.Time) *AuthRefreshTokenUpdateOne {
	_u.mutation.SetAuthTime(v)
	return _u
}

// SetNillableAuthTime sets the "auth_time" field if the given value is not nil.
func (_u *AuthRefreshTokenUpdateOne) SetNillableAuthTime(v *time.Time) *AuthRefreshTokenUpdateOne {
	if v != nil {
		_u.SetAuthTime(*v)
	}
	return _u
}

// SetAmr sets the "amr" field.
func (_u *AuthRefreshTokenUpdateOne) SetAmr(v []string) *AuthRefreshTokenUpdateOne {
	_u.mutation.SetAmr(v)
	return _u
}

// AppendAmr appends value to the "amr" field.
func (_u *AuthRefreshTokenUpdateOne) AppendAmr(v []string) *AuthRefreshTokenUpdateOne {
	_u.mutation.AppendAmr(v)
	return _u
}

// SetAudience sets the "audience" field.
func (_u *AuthRefreshTokenUpdateOne) SetAudience(v []string) *AuthRefreshTokenUpdateOne {
	_u.mutation.SetAudience(v)
	return _u
}

// AppendAudience appends value to the "audience" field.
func (_u *AuthRefreshTokenUpdateOne) AppendAudience(v []string) *AuthRefreshTokenUpdateOne {
	_u.mutation.AppendAudience(v)
	return _u
}

// SetUserID sets the "user_id" field.
func (_u *AuthRefreshTokenUpdateOne) SetUserID(v string) *AuthRefreshTokenUpdateOne {
	_u.mutation.SetUserID(v)
	return _u
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (_u *AuthRefreshTokenUpdateOne) SetNillableUserID(v *string) *AuthRefreshTokenUpdateOne {
	if v != nil {
		_u.SetUserID(*v)
	}
	return _u
}

// SetApplicationID sets the "application_id" field.
func (_u *AuthRefreshTokenUpdateOne) SetApplicationID(v string) *AuthRefreshTokenUpdateOne {
	_u.mutation.SetApplicationID(v)
	return _u
}

// SetNillableApplicationID sets the "application_id" field if the given value is not nil.
func (_u *AuthRefreshTokenUpdateOne) SetNillableApplicationID(v *string) *AuthRefreshTokenUpdateOne {
	if v != nil {
		_u.SetApplicationID(*v)
	}
	return _u
}

// SetExpiration sets the "expiration" field.
func (_u *AuthRefreshTokenUpdateOne) SetExpiration(v time.Time) *AuthRefreshTokenUpdateOne {
	_u.mutation.SetExpiration(v)
	return _u
}

// SetNillableExpiration sets the "expiration" field if the given value is not nil.
func (_u *AuthRefreshTokenUpdateOne) SetNillableExpiration(v *time.Time) *AuthRefreshTokenUpdateOne {
	if v != nil {
		_u.SetExpiration(*v)
	}
	return _u
}

// SetScopes sets the "scopes" field.
func (_u *AuthRefreshTokenUpdateOne) SetScopes(v []string) *AuthRefreshTokenUpdateOne {
	_u.mutation.SetScopes(v)
	return _u
}

// AppendScopes appends value to the "scopes" field.
func (_u *AuthRefreshTokenUpdateOne) AppendScopes(v []string) *AuthRefreshTokenUpdateOne {
	_u.mutation.AppendScopes(v)
	return _u
}

// Mutation returns the AuthRefreshTokenMutation object of the builder.
func (_u *AuthRefreshTokenUpdateOne) Mutation() *AuthRefreshTokenMutation {
	return _u.mutation
}

// Where appends a list predicates to the AuthRefreshTokenUpdate builder.
func (_u *AuthRefreshTokenUpdateOne) Where(ps ...predicate.AuthRefreshToken) *AuthRefreshTokenUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *AuthRefreshTokenUpdateOne) Select(field string, fields ...string) *AuthRefreshTokenUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated AuthRefreshToken entity.
func (_u *AuthRefreshTokenUpdateOne) Save(ctx context.Context) (*AuthRefreshToken, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *AuthRefreshTokenUpdateOne) SaveX(ctx context.Context) *AuthRefreshToken {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *AuthRefreshTokenUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *AuthRefreshTokenUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

func (_u *AuthRefreshTokenUpdateOne) sqlSave(ctx context.Context) (_node *AuthRefreshToken, err error) {
	_spec := sqlgraph.NewUpdateSpec(authrefreshtoken.Table, authrefreshtoken.Columns, sqlgraph.NewFieldSpec(authrefreshtoken.FieldID, field.TypeString))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "AuthRefreshToken.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, authrefreshtoken.FieldID)
		for _, f := range fields {
			if !authrefreshtoken.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != authrefreshtoken.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.Token(); ok {
		_spec.SetField(authrefreshtoken.FieldToken, field.TypeString, value)
	}
	if value, ok := _u.mutation.Subject(); ok {
		_spec.SetField(authrefreshtoken.FieldSubject, field.TypeString, value)
	}
	if value, ok := _u.mutation.AuthTime(); ok {
		_spec.SetField(authrefreshtoken.FieldAuthTime, field.TypeTime, value)
	}
	if value, ok := _u.mutation.Amr(); ok {
		_spec.SetField(authrefreshtoken.FieldAmr, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedAmr(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, authrefreshtoken.FieldAmr, value)
		})
	}
	if value, ok := _u.mutation.Audience(); ok {
		_spec.SetField(authrefreshtoken.FieldAudience, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedAudience(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, authrefreshtoken.FieldAudience, value)
		})
	}
	if value, ok := _u.mutation.UserID(); ok {
		_spec.SetField(authrefreshtoken.FieldUserID, field.TypeString, value)
	}
	if value, ok := _u.mutation.ApplicationID(); ok {
		_spec.SetField(authrefreshtoken.FieldApplicationID, field.TypeString, value)
	}
	if value, ok := _u.mutation.Expiration(); ok {
		_spec.SetField(authrefreshtoken.FieldExpiration, field.TypeTime, value)
	}
	if value, ok := _u.mutation.Scopes(); ok {
		_spec.SetField(authrefreshtoken.FieldScopes, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedScopes(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, authrefreshtoken.FieldScopes, value)
		})
	}
	_node = &AuthRefreshToken{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{authrefreshtoken.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
