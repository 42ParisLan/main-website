// Code generated by ent, DO NOT EDIT.

package ent

import (
	"base-website/ent/authtoken"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// AuthTokenCreate is the builder for creating a AuthToken entity.
type AuthTokenCreate struct {
	config
	mutation *AuthTokenMutation
	hooks    []Hook
}

// SetApplicationID sets the "application_id" field.
func (_c *AuthTokenCreate) SetApplicationID(v string) *AuthTokenCreate {
	_c.mutation.SetApplicationID(v)
	return _c
}

// SetSubject sets the "subject" field.
func (_c *AuthTokenCreate) SetSubject(v string) *AuthTokenCreate {
	_c.mutation.SetSubject(v)
	return _c
}

// SetRefreshTokenID sets the "refresh_token_id" field.
func (_c *AuthTokenCreate) SetRefreshTokenID(v string) *AuthTokenCreate {
	_c.mutation.SetRefreshTokenID(v)
	return _c
}

// SetAudience sets the "audience" field.
func (_c *AuthTokenCreate) SetAudience(v []string) *AuthTokenCreate {
	_c.mutation.SetAudience(v)
	return _c
}

// SetExpiration sets the "expiration" field.
func (_c *AuthTokenCreate) SetExpiration(v time.Time) *AuthTokenCreate {
	_c.mutation.SetExpiration(v)
	return _c
}

// SetScopes sets the "scopes" field.
func (_c *AuthTokenCreate) SetScopes(v []string) *AuthTokenCreate {
	_c.mutation.SetScopes(v)
	return _c
}

// SetID sets the "id" field.
func (_c *AuthTokenCreate) SetID(v string) *AuthTokenCreate {
	_c.mutation.SetID(v)
	return _c
}

// Mutation returns the AuthTokenMutation object of the builder.
func (_c *AuthTokenCreate) Mutation() *AuthTokenMutation {
	return _c.mutation
}

// Save creates the AuthToken in the database.
func (_c *AuthTokenCreate) Save(ctx context.Context) (*AuthToken, error) {
	return withHooks(ctx, _c.sqlSave, _c.mutation, _c.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (_c *AuthTokenCreate) SaveX(ctx context.Context) *AuthToken {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *AuthTokenCreate) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *AuthTokenCreate) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_c *AuthTokenCreate) check() error {
	if _, ok := _c.mutation.ApplicationID(); !ok {
		return &ValidationError{Name: "application_id", err: errors.New(`ent: missing required field "AuthToken.application_id"`)}
	}
	if _, ok := _c.mutation.Subject(); !ok {
		return &ValidationError{Name: "subject", err: errors.New(`ent: missing required field "AuthToken.subject"`)}
	}
	if _, ok := _c.mutation.RefreshTokenID(); !ok {
		return &ValidationError{Name: "refresh_token_id", err: errors.New(`ent: missing required field "AuthToken.refresh_token_id"`)}
	}
	if _, ok := _c.mutation.Audience(); !ok {
		return &ValidationError{Name: "audience", err: errors.New(`ent: missing required field "AuthToken.audience"`)}
	}
	if _, ok := _c.mutation.Expiration(); !ok {
		return &ValidationError{Name: "expiration", err: errors.New(`ent: missing required field "AuthToken.expiration"`)}
	}
	if _, ok := _c.mutation.Scopes(); !ok {
		return &ValidationError{Name: "scopes", err: errors.New(`ent: missing required field "AuthToken.scopes"`)}
	}
	return nil
}

func (_c *AuthTokenCreate) sqlSave(ctx context.Context) (*AuthToken, error) {
	if err := _c.check(); err != nil {
		return nil, err
	}
	_node, _spec := _c.createSpec()
	if err := sqlgraph.CreateNode(ctx, _c.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected AuthToken.ID type: %T", _spec.ID.Value)
		}
	}
	_c.mutation.id = &_node.ID
	_c.mutation.done = true
	return _node, nil
}

func (_c *AuthTokenCreate) createSpec() (*AuthToken, *sqlgraph.CreateSpec) {
	var (
		_node = &AuthToken{config: _c.config}
		_spec = sqlgraph.NewCreateSpec(authtoken.Table, sqlgraph.NewFieldSpec(authtoken.FieldID, field.TypeString))
	)
	if id, ok := _c.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := _c.mutation.ApplicationID(); ok {
		_spec.SetField(authtoken.FieldApplicationID, field.TypeString, value)
		_node.ApplicationID = value
	}
	if value, ok := _c.mutation.Subject(); ok {
		_spec.SetField(authtoken.FieldSubject, field.TypeString, value)
		_node.Subject = value
	}
	if value, ok := _c.mutation.RefreshTokenID(); ok {
		_spec.SetField(authtoken.FieldRefreshTokenID, field.TypeString, value)
		_node.RefreshTokenID = value
	}
	if value, ok := _c.mutation.Audience(); ok {
		_spec.SetField(authtoken.FieldAudience, field.TypeJSON, value)
		_node.Audience = value
	}
	if value, ok := _c.mutation.Expiration(); ok {
		_spec.SetField(authtoken.FieldExpiration, field.TypeTime, value)
		_node.Expiration = value
	}
	if value, ok := _c.mutation.Scopes(); ok {
		_spec.SetField(authtoken.FieldScopes, field.TypeJSON, value)
		_node.Scopes = value
	}
	return _node, _spec
}

// AuthTokenCreateBulk is the builder for creating many AuthToken entities in bulk.
type AuthTokenCreateBulk struct {
	config
	err      error
	builders []*AuthTokenCreate
}

// Save creates the AuthToken entities in the database.
func (_c *AuthTokenCreateBulk) Save(ctx context.Context) ([]*AuthToken, error) {
	if _c.err != nil {
		return nil, _c.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(_c.builders))
	nodes := make([]*AuthToken, len(_c.builders))
	mutators := make([]Mutator, len(_c.builders))
	for i := range _c.builders {
		func(i int, root context.Context) {
			builder := _c.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*AuthTokenMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, _c.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, _c.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, _c.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (_c *AuthTokenCreateBulk) SaveX(ctx context.Context) []*AuthToken {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *AuthTokenCreateBulk) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *AuthTokenCreateBulk) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}
