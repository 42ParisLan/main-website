// Code generated by ent, DO NOT EDIT.

package ent

import (
	"base-website/ent/authrefreshtoken"
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// AuthRefreshToken is the model entity for the AuthRefreshToken schema.
type AuthRefreshToken struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// Token holds the value of the "Token" field.
	Token string `json:"Token,omitempty"`
	// Subject holds the value of the "subject" field.
	Subject string `json:"subject,omitempty"`
	// AuthTime holds the value of the "auth_time" field.
	AuthTime time.Time `json:"auth_time,omitempty"`
	// Amr holds the value of the "amr" field.
	Amr []string `json:"amr,omitempty"`
	// Audience holds the value of the "audience" field.
	Audience []string `json:"audience,omitempty"`
	// UserID holds the value of the "user_id" field.
	UserID string `json:"user_id,omitempty"`
	// ApplicationID holds the value of the "application_id" field.
	ApplicationID string `json:"application_id,omitempty"`
	// Expiration holds the value of the "expiration" field.
	Expiration time.Time `json:"expiration,omitempty"`
	// Scopes holds the value of the "scopes" field.
	Scopes       []string `json:"scopes,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*AuthRefreshToken) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case authrefreshtoken.FieldAmr, authrefreshtoken.FieldAudience, authrefreshtoken.FieldScopes:
			values[i] = new([]byte)
		case authrefreshtoken.FieldID, authrefreshtoken.FieldToken, authrefreshtoken.FieldSubject, authrefreshtoken.FieldUserID, authrefreshtoken.FieldApplicationID:
			values[i] = new(sql.NullString)
		case authrefreshtoken.FieldAuthTime, authrefreshtoken.FieldExpiration:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the AuthRefreshToken fields.
func (_m *AuthRefreshToken) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case authrefreshtoken.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				_m.ID = value.String
			}
		case authrefreshtoken.FieldToken:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field Token", values[i])
			} else if value.Valid {
				_m.Token = value.String
			}
		case authrefreshtoken.FieldSubject:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field subject", values[i])
			} else if value.Valid {
				_m.Subject = value.String
			}
		case authrefreshtoken.FieldAuthTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field auth_time", values[i])
			} else if value.Valid {
				_m.AuthTime = value.Time
			}
		case authrefreshtoken.FieldAmr:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field amr", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &_m.Amr); err != nil {
					return fmt.Errorf("unmarshal field amr: %w", err)
				}
			}
		case authrefreshtoken.FieldAudience:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field audience", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &_m.Audience); err != nil {
					return fmt.Errorf("unmarshal field audience: %w", err)
				}
			}
		case authrefreshtoken.FieldUserID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value.Valid {
				_m.UserID = value.String
			}
		case authrefreshtoken.FieldApplicationID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field application_id", values[i])
			} else if value.Valid {
				_m.ApplicationID = value.String
			}
		case authrefreshtoken.FieldExpiration:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field expiration", values[i])
			} else if value.Valid {
				_m.Expiration = value.Time
			}
		case authrefreshtoken.FieldScopes:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field scopes", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &_m.Scopes); err != nil {
					return fmt.Errorf("unmarshal field scopes: %w", err)
				}
			}
		default:
			_m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the AuthRefreshToken.
// This includes values selected through modifiers, order, etc.
func (_m *AuthRefreshToken) Value(name string) (ent.Value, error) {
	return _m.selectValues.Get(name)
}

// Update returns a builder for updating this AuthRefreshToken.
// Note that you need to call AuthRefreshToken.Unwrap() before calling this method if this AuthRefreshToken
// was returned from a transaction, and the transaction was committed or rolled back.
func (_m *AuthRefreshToken) Update() *AuthRefreshTokenUpdateOne {
	return NewAuthRefreshTokenClient(_m.config).UpdateOne(_m)
}

// Unwrap unwraps the AuthRefreshToken entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (_m *AuthRefreshToken) Unwrap() *AuthRefreshToken {
	_tx, ok := _m.config.driver.(*txDriver)
	if !ok {
		panic("ent: AuthRefreshToken is not a transactional entity")
	}
	_m.config.driver = _tx.drv
	return _m
}

// String implements the fmt.Stringer.
func (_m *AuthRefreshToken) String() string {
	var builder strings.Builder
	builder.WriteString("AuthRefreshToken(")
	builder.WriteString(fmt.Sprintf("id=%v, ", _m.ID))
	builder.WriteString("Token=")
	builder.WriteString(_m.Token)
	builder.WriteString(", ")
	builder.WriteString("subject=")
	builder.WriteString(_m.Subject)
	builder.WriteString(", ")
	builder.WriteString("auth_time=")
	builder.WriteString(_m.AuthTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("amr=")
	builder.WriteString(fmt.Sprintf("%v", _m.Amr))
	builder.WriteString(", ")
	builder.WriteString("audience=")
	builder.WriteString(fmt.Sprintf("%v", _m.Audience))
	builder.WriteString(", ")
	builder.WriteString("user_id=")
	builder.WriteString(_m.UserID)
	builder.WriteString(", ")
	builder.WriteString("application_id=")
	builder.WriteString(_m.ApplicationID)
	builder.WriteString(", ")
	builder.WriteString("expiration=")
	builder.WriteString(_m.Expiration.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("scopes=")
	builder.WriteString(fmt.Sprintf("%v", _m.Scopes))
	builder.WriteByte(')')
	return builder.String()
}

// AuthRefreshTokens is a parsable slice of AuthRefreshToken.
type AuthRefreshTokens []*AuthRefreshToken
