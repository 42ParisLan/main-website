// Code generated by ent, DO NOT EDIT.

package user

import (
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the user type in the database.
	Label = "user"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldUsername holds the string denoting the username field in the database.
	FieldUsername = "username"
	// FieldFirstName holds the string denoting the first_name field in the database.
	FieldFirstName = "first_name"
	// FieldLastName holds the string denoting the last_name field in the database.
	FieldLastName = "last_name"
	// FieldEmail holds the string denoting the email field in the database.
	FieldEmail = "email"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldPicture holds the string denoting the picture field in the database.
	FieldPicture = "picture"
	// FieldKind holds the string denoting the kind field in the database.
	FieldKind = "kind"
	// FieldUsualFullName holds the string denoting the usual_full_name field in the database.
	FieldUsualFullName = "usual_full_name"
	// FieldUsualFirstName holds the string denoting the usual_first_name field in the database.
	FieldUsualFirstName = "usual_first_name"
	// FieldRoles holds the string denoting the roles field in the database.
	FieldRoles = "roles"
	// EdgeUserVotes holds the string denoting the user_votes edge name in mutations.
	EdgeUserVotes = "user_votes"
	// EdgeCreatedVotes holds the string denoting the created_votes edge name in mutations.
	EdgeCreatedVotes = "created_votes"
	// Table holds the table name of the user in the database.
	Table = "users"
	// UserVotesTable is the table that holds the user_votes relation/edge.
	UserVotesTable = "user_votes"
	// UserVotesInverseTable is the table name for the UserVote entity.
	// It exists in this package in order to avoid circular dependency with the "uservote" package.
	UserVotesInverseTable = "user_votes"
	// UserVotesColumn is the table column denoting the user_votes relation/edge.
	UserVotesColumn = "user_user_votes"
	// CreatedVotesTable is the table that holds the created_votes relation/edge.
	CreatedVotesTable = "votes"
	// CreatedVotesInverseTable is the table name for the Vote entity.
	// It exists in this package in order to avoid circular dependency with the "vote" package.
	CreatedVotesInverseTable = "votes"
	// CreatedVotesColumn is the table column denoting the created_votes relation/edge.
	CreatedVotesColumn = "user_created_votes"
)

// Columns holds all SQL columns for user fields.
var Columns = []string{
	FieldID,
	FieldUsername,
	FieldFirstName,
	FieldLastName,
	FieldEmail,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldPicture,
	FieldKind,
	FieldUsualFullName,
	FieldUsualFirstName,
	FieldRoles,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultRoles holds the default value on creation for the "roles" field.
	DefaultRoles []string
)

// Kind defines the type for the "kind" enum field.
type Kind string

// KindUser is the default value of the Kind enum.
const DefaultKind = KindUser

// Kind values.
const (
	KindUser  Kind = "user"
	KindAdmin Kind = "admin"
)

func (k Kind) String() string {
	return string(k)
}

// KindValidator is a validator for the "kind" field enum values. It is called by the builders before save.
func KindValidator(k Kind) error {
	switch k {
	case KindUser, KindAdmin:
		return nil
	default:
		return fmt.Errorf("user: invalid enum value for kind field: %q", k)
	}
}

// OrderOption defines the ordering options for the User queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByUsername orders the results by the username field.
func ByUsername(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUsername, opts...).ToFunc()
}

// ByFirstName orders the results by the first_name field.
func ByFirstName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFirstName, opts...).ToFunc()
}

// ByLastName orders the results by the last_name field.
func ByLastName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLastName, opts...).ToFunc()
}

// ByEmail orders the results by the email field.
func ByEmail(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEmail, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByPicture orders the results by the picture field.
func ByPicture(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPicture, opts...).ToFunc()
}

// ByKind orders the results by the kind field.
func ByKind(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldKind, opts...).ToFunc()
}

// ByUsualFullName orders the results by the usual_full_name field.
func ByUsualFullName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUsualFullName, opts...).ToFunc()
}

// ByUsualFirstName orders the results by the usual_first_name field.
func ByUsualFirstName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUsualFirstName, opts...).ToFunc()
}

// ByUserVotesCount orders the results by user_votes count.
func ByUserVotesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newUserVotesStep(), opts...)
	}
}

// ByUserVotes orders the results by user_votes terms.
func ByUserVotes(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newUserVotesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByCreatedVotesCount orders the results by created_votes count.
func ByCreatedVotesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newCreatedVotesStep(), opts...)
	}
}

// ByCreatedVotes orders the results by created_votes terms.
func ByCreatedVotes(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCreatedVotesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newUserVotesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(UserVotesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, UserVotesTable, UserVotesColumn),
	)
}
func newCreatedVotesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CreatedVotesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, CreatedVotesTable, CreatedVotesColumn),
	)
}
