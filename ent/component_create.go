// Code generated by ent, DO NOT EDIT.

package ent

import (
	"base-website/ent/component"
	"base-website/ent/uservote"
	"base-website/ent/vote"
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ComponentCreate is the builder for creating a Component entity.
type ComponentCreate struct {
	config
	mutation *ComponentMutation
	hooks    []Hook
}

// SetName sets the "name" field.
func (_c *ComponentCreate) SetName(v string) *ComponentCreate {
	_c.mutation.SetName(v)
	return _c
}

// SetDescription sets the "description" field.
func (_c *ComponentCreate) SetDescription(v string) *ComponentCreate {
	_c.mutation.SetDescription(v)
	return _c
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (_c *ComponentCreate) SetNillableDescription(v *string) *ComponentCreate {
	if v != nil {
		_c.SetDescription(*v)
	}
	return _c
}

// SetImageURL sets the "image_url" field.
func (_c *ComponentCreate) SetImageURL(v string) *ComponentCreate {
	_c.mutation.SetImageURL(v)
	return _c
}

// SetNillableImageURL sets the "image_url" field if the given value is not nil.
func (_c *ComponentCreate) SetNillableImageURL(v *string) *ComponentCreate {
	if v != nil {
		_c.SetImageURL(*v)
	}
	return _c
}

// SetColor sets the "color" field.
func (_c *ComponentCreate) SetColor(v string) *ComponentCreate {
	_c.mutation.SetColor(v)
	return _c
}

// SetNillableColor sets the "color" field if the given value is not nil.
func (_c *ComponentCreate) SetNillableColor(v *string) *ComponentCreate {
	if v != nil {
		_c.SetColor(*v)
	}
	return _c
}

// SetVoteID sets the "vote" edge to the Vote entity by ID.
func (_c *ComponentCreate) SetVoteID(id int) *ComponentCreate {
	_c.mutation.SetVoteID(id)
	return _c
}

// SetVote sets the "vote" edge to the Vote entity.
func (_c *ComponentCreate) SetVote(v *Vote) *ComponentCreate {
	return _c.SetVoteID(v.ID)
}

// AddUserVoteIDs adds the "user_votes" edge to the UserVote entity by IDs.
func (_c *ComponentCreate) AddUserVoteIDs(ids ...int) *ComponentCreate {
	_c.mutation.AddUserVoteIDs(ids...)
	return _c
}

// AddUserVotes adds the "user_votes" edges to the UserVote entity.
func (_c *ComponentCreate) AddUserVotes(v ...*UserVote) *ComponentCreate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddUserVoteIDs(ids...)
}

// Mutation returns the ComponentMutation object of the builder.
func (_c *ComponentCreate) Mutation() *ComponentMutation {
	return _c.mutation
}

// Save creates the Component in the database.
func (_c *ComponentCreate) Save(ctx context.Context) (*Component, error) {
	return withHooks(ctx, _c.sqlSave, _c.mutation, _c.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (_c *ComponentCreate) SaveX(ctx context.Context) *Component {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *ComponentCreate) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *ComponentCreate) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_c *ComponentCreate) check() error {
	if _, ok := _c.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "Component.name"`)}
	}
	if len(_c.mutation.VoteIDs()) == 0 {
		return &ValidationError{Name: "vote", err: errors.New(`ent: missing required edge "Component.vote"`)}
	}
	return nil
}

func (_c *ComponentCreate) sqlSave(ctx context.Context) (*Component, error) {
	if err := _c.check(); err != nil {
		return nil, err
	}
	_node, _spec := _c.createSpec()
	if err := sqlgraph.CreateNode(ctx, _c.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	_c.mutation.id = &_node.ID
	_c.mutation.done = true
	return _node, nil
}

func (_c *ComponentCreate) createSpec() (*Component, *sqlgraph.CreateSpec) {
	var (
		_node = &Component{config: _c.config}
		_spec = sqlgraph.NewCreateSpec(component.Table, sqlgraph.NewFieldSpec(component.FieldID, field.TypeInt))
	)
	if value, ok := _c.mutation.Name(); ok {
		_spec.SetField(component.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := _c.mutation.Description(); ok {
		_spec.SetField(component.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := _c.mutation.ImageURL(); ok {
		_spec.SetField(component.FieldImageURL, field.TypeString, value)
		_node.ImageURL = value
	}
	if value, ok := _c.mutation.Color(); ok {
		_spec.SetField(component.FieldColor, field.TypeString, value)
		_node.Color = value
	}
	if nodes := _c.mutation.VoteIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   component.VoteTable,
			Columns: []string{component.VoteColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(vote.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.vote_components = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.UserVotesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   component.UserVotesTable,
			Columns: []string{component.UserVotesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(uservote.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ComponentCreateBulk is the builder for creating many Component entities in bulk.
type ComponentCreateBulk struct {
	config
	err      error
	builders []*ComponentCreate
}

// Save creates the Component entities in the database.
func (_c *ComponentCreateBulk) Save(ctx context.Context) ([]*Component, error) {
	if _c.err != nil {
		return nil, _c.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(_c.builders))
	nodes := make([]*Component, len(_c.builders))
	mutators := make([]Mutator, len(_c.builders))
	for i := range _c.builders {
		func(i int, root context.Context) {
			builder := _c.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ComponentMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, _c.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, _c.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, _c.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (_c *ComponentCreateBulk) SaveX(ctx context.Context) []*Component {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *ComponentCreateBulk) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *ComponentCreateBulk) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}
