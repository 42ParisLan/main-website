// Code generated by ent, DO NOT EDIT.

package ent

import (
	"base-website/ent/component"
	"base-website/ent/predicate"
	"base-website/ent/uservote"
	"base-website/ent/vote"
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ComponentUpdate is the builder for updating Component entities.
type ComponentUpdate struct {
	config
	hooks    []Hook
	mutation *ComponentMutation
}

// Where appends a list predicates to the ComponentUpdate builder.
func (_u *ComponentUpdate) Where(ps ...predicate.Component) *ComponentUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetName sets the "name" field.
func (_u *ComponentUpdate) SetName(v string) *ComponentUpdate {
	_u.mutation.SetName(v)
	return _u
}

// SetNillableName sets the "name" field if the given value is not nil.
func (_u *ComponentUpdate) SetNillableName(v *string) *ComponentUpdate {
	if v != nil {
		_u.SetName(*v)
	}
	return _u
}

// SetDescription sets the "description" field.
func (_u *ComponentUpdate) SetDescription(v string) *ComponentUpdate {
	_u.mutation.SetDescription(v)
	return _u
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (_u *ComponentUpdate) SetNillableDescription(v *string) *ComponentUpdate {
	if v != nil {
		_u.SetDescription(*v)
	}
	return _u
}

// ClearDescription clears the value of the "description" field.
func (_u *ComponentUpdate) ClearDescription() *ComponentUpdate {
	_u.mutation.ClearDescription()
	return _u
}

// SetImageURL sets the "image_url" field.
func (_u *ComponentUpdate) SetImageURL(v string) *ComponentUpdate {
	_u.mutation.SetImageURL(v)
	return _u
}

// SetNillableImageURL sets the "image_url" field if the given value is not nil.
func (_u *ComponentUpdate) SetNillableImageURL(v *string) *ComponentUpdate {
	if v != nil {
		_u.SetImageURL(*v)
	}
	return _u
}

// ClearImageURL clears the value of the "image_url" field.
func (_u *ComponentUpdate) ClearImageURL() *ComponentUpdate {
	_u.mutation.ClearImageURL()
	return _u
}

// SetColor sets the "color" field.
func (_u *ComponentUpdate) SetColor(v string) *ComponentUpdate {
	_u.mutation.SetColor(v)
	return _u
}

// SetNillableColor sets the "color" field if the given value is not nil.
func (_u *ComponentUpdate) SetNillableColor(v *string) *ComponentUpdate {
	if v != nil {
		_u.SetColor(*v)
	}
	return _u
}

// ClearColor clears the value of the "color" field.
func (_u *ComponentUpdate) ClearColor() *ComponentUpdate {
	_u.mutation.ClearColor()
	return _u
}

// SetVoteID sets the "vote" edge to the Vote entity by ID.
func (_u *ComponentUpdate) SetVoteID(id int) *ComponentUpdate {
	_u.mutation.SetVoteID(id)
	return _u
}

// SetVote sets the "vote" edge to the Vote entity.
func (_u *ComponentUpdate) SetVote(v *Vote) *ComponentUpdate {
	return _u.SetVoteID(v.ID)
}

// AddUserVoteIDs adds the "user_votes" edge to the UserVote entity by IDs.
func (_u *ComponentUpdate) AddUserVoteIDs(ids ...int) *ComponentUpdate {
	_u.mutation.AddUserVoteIDs(ids...)
	return _u
}

// AddUserVotes adds the "user_votes" edges to the UserVote entity.
func (_u *ComponentUpdate) AddUserVotes(v ...*UserVote) *ComponentUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddUserVoteIDs(ids...)
}

// Mutation returns the ComponentMutation object of the builder.
func (_u *ComponentUpdate) Mutation() *ComponentMutation {
	return _u.mutation
}

// ClearVote clears the "vote" edge to the Vote entity.
func (_u *ComponentUpdate) ClearVote() *ComponentUpdate {
	_u.mutation.ClearVote()
	return _u
}

// ClearUserVotes clears all "user_votes" edges to the UserVote entity.
func (_u *ComponentUpdate) ClearUserVotes() *ComponentUpdate {
	_u.mutation.ClearUserVotes()
	return _u
}

// RemoveUserVoteIDs removes the "user_votes" edge to UserVote entities by IDs.
func (_u *ComponentUpdate) RemoveUserVoteIDs(ids ...int) *ComponentUpdate {
	_u.mutation.RemoveUserVoteIDs(ids...)
	return _u
}

// RemoveUserVotes removes "user_votes" edges to UserVote entities.
func (_u *ComponentUpdate) RemoveUserVotes(v ...*UserVote) *ComponentUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveUserVoteIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *ComponentUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *ComponentUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *ComponentUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *ComponentUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *ComponentUpdate) check() error {
	if _u.mutation.VoteCleared() && len(_u.mutation.VoteIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Component.vote"`)
	}
	return nil
}

func (_u *ComponentUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(component.Table, component.Columns, sqlgraph.NewFieldSpec(component.FieldID, field.TypeInt))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.Name(); ok {
		_spec.SetField(component.FieldName, field.TypeString, value)
	}
	if value, ok := _u.mutation.Description(); ok {
		_spec.SetField(component.FieldDescription, field.TypeString, value)
	}
	if _u.mutation.DescriptionCleared() {
		_spec.ClearField(component.FieldDescription, field.TypeString)
	}
	if value, ok := _u.mutation.ImageURL(); ok {
		_spec.SetField(component.FieldImageURL, field.TypeString, value)
	}
	if _u.mutation.ImageURLCleared() {
		_spec.ClearField(component.FieldImageURL, field.TypeString)
	}
	if value, ok := _u.mutation.Color(); ok {
		_spec.SetField(component.FieldColor, field.TypeString, value)
	}
	if _u.mutation.ColorCleared() {
		_spec.ClearField(component.FieldColor, field.TypeString)
	}
	if _u.mutation.VoteCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   component.VoteTable,
			Columns: []string{component.VoteColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(vote.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.VoteIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   component.VoteTable,
			Columns: []string{component.VoteColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(vote.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.UserVotesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   component.UserVotesTable,
			Columns: []string{component.UserVotesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(uservote.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedUserVotesIDs(); len(nodes) > 0 && !_u.mutation.UserVotesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   component.UserVotesTable,
			Columns: []string{component.UserVotesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(uservote.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.UserVotesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   component.UserVotesTable,
			Columns: []string{component.UserVotesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(uservote.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{component.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// ComponentUpdateOne is the builder for updating a single Component entity.
type ComponentUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ComponentMutation
}

// SetName sets the "name" field.
func (_u *ComponentUpdateOne) SetName(v string) *ComponentUpdateOne {
	_u.mutation.SetName(v)
	return _u
}

// SetNillableName sets the "name" field if the given value is not nil.
func (_u *ComponentUpdateOne) SetNillableName(v *string) *ComponentUpdateOne {
	if v != nil {
		_u.SetName(*v)
	}
	return _u
}

// SetDescription sets the "description" field.
func (_u *ComponentUpdateOne) SetDescription(v string) *ComponentUpdateOne {
	_u.mutation.SetDescription(v)
	return _u
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (_u *ComponentUpdateOne) SetNillableDescription(v *string) *ComponentUpdateOne {
	if v != nil {
		_u.SetDescription(*v)
	}
	return _u
}

// ClearDescription clears the value of the "description" field.
func (_u *ComponentUpdateOne) ClearDescription() *ComponentUpdateOne {
	_u.mutation.ClearDescription()
	return _u
}

// SetImageURL sets the "image_url" field.
func (_u *ComponentUpdateOne) SetImageURL(v string) *ComponentUpdateOne {
	_u.mutation.SetImageURL(v)
	return _u
}

// SetNillableImageURL sets the "image_url" field if the given value is not nil.
func (_u *ComponentUpdateOne) SetNillableImageURL(v *string) *ComponentUpdateOne {
	if v != nil {
		_u.SetImageURL(*v)
	}
	return _u
}

// ClearImageURL clears the value of the "image_url" field.
func (_u *ComponentUpdateOne) ClearImageURL() *ComponentUpdateOne {
	_u.mutation.ClearImageURL()
	return _u
}

// SetColor sets the "color" field.
func (_u *ComponentUpdateOne) SetColor(v string) *ComponentUpdateOne {
	_u.mutation.SetColor(v)
	return _u
}

// SetNillableColor sets the "color" field if the given value is not nil.
func (_u *ComponentUpdateOne) SetNillableColor(v *string) *ComponentUpdateOne {
	if v != nil {
		_u.SetColor(*v)
	}
	return _u
}

// ClearColor clears the value of the "color" field.
func (_u *ComponentUpdateOne) ClearColor() *ComponentUpdateOne {
	_u.mutation.ClearColor()
	return _u
}

// SetVoteID sets the "vote" edge to the Vote entity by ID.
func (_u *ComponentUpdateOne) SetVoteID(id int) *ComponentUpdateOne {
	_u.mutation.SetVoteID(id)
	return _u
}

// SetVote sets the "vote" edge to the Vote entity.
func (_u *ComponentUpdateOne) SetVote(v *Vote) *ComponentUpdateOne {
	return _u.SetVoteID(v.ID)
}

// AddUserVoteIDs adds the "user_votes" edge to the UserVote entity by IDs.
func (_u *ComponentUpdateOne) AddUserVoteIDs(ids ...int) *ComponentUpdateOne {
	_u.mutation.AddUserVoteIDs(ids...)
	return _u
}

// AddUserVotes adds the "user_votes" edges to the UserVote entity.
func (_u *ComponentUpdateOne) AddUserVotes(v ...*UserVote) *ComponentUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddUserVoteIDs(ids...)
}

// Mutation returns the ComponentMutation object of the builder.
func (_u *ComponentUpdateOne) Mutation() *ComponentMutation {
	return _u.mutation
}

// ClearVote clears the "vote" edge to the Vote entity.
func (_u *ComponentUpdateOne) ClearVote() *ComponentUpdateOne {
	_u.mutation.ClearVote()
	return _u
}

// ClearUserVotes clears all "user_votes" edges to the UserVote entity.
func (_u *ComponentUpdateOne) ClearUserVotes() *ComponentUpdateOne {
	_u.mutation.ClearUserVotes()
	return _u
}

// RemoveUserVoteIDs removes the "user_votes" edge to UserVote entities by IDs.
func (_u *ComponentUpdateOne) RemoveUserVoteIDs(ids ...int) *ComponentUpdateOne {
	_u.mutation.RemoveUserVoteIDs(ids...)
	return _u
}

// RemoveUserVotes removes "user_votes" edges to UserVote entities.
func (_u *ComponentUpdateOne) RemoveUserVotes(v ...*UserVote) *ComponentUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveUserVoteIDs(ids...)
}

// Where appends a list predicates to the ComponentUpdate builder.
func (_u *ComponentUpdateOne) Where(ps ...predicate.Component) *ComponentUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *ComponentUpdateOne) Select(field string, fields ...string) *ComponentUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated Component entity.
func (_u *ComponentUpdateOne) Save(ctx context.Context) (*Component, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *ComponentUpdateOne) SaveX(ctx context.Context) *Component {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *ComponentUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *ComponentUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *ComponentUpdateOne) check() error {
	if _u.mutation.VoteCleared() && len(_u.mutation.VoteIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Component.vote"`)
	}
	return nil
}

func (_u *ComponentUpdateOne) sqlSave(ctx context.Context) (_node *Component, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(component.Table, component.Columns, sqlgraph.NewFieldSpec(component.FieldID, field.TypeInt))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Component.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, component.FieldID)
		for _, f := range fields {
			if !component.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != component.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.Name(); ok {
		_spec.SetField(component.FieldName, field.TypeString, value)
	}
	if value, ok := _u.mutation.Description(); ok {
		_spec.SetField(component.FieldDescription, field.TypeString, value)
	}
	if _u.mutation.DescriptionCleared() {
		_spec.ClearField(component.FieldDescription, field.TypeString)
	}
	if value, ok := _u.mutation.ImageURL(); ok {
		_spec.SetField(component.FieldImageURL, field.TypeString, value)
	}
	if _u.mutation.ImageURLCleared() {
		_spec.ClearField(component.FieldImageURL, field.TypeString)
	}
	if value, ok := _u.mutation.Color(); ok {
		_spec.SetField(component.FieldColor, field.TypeString, value)
	}
	if _u.mutation.ColorCleared() {
		_spec.ClearField(component.FieldColor, field.TypeString)
	}
	if _u.mutation.VoteCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   component.VoteTable,
			Columns: []string{component.VoteColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(vote.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.VoteIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   component.VoteTable,
			Columns: []string{component.VoteColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(vote.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.UserVotesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   component.UserVotesTable,
			Columns: []string{component.UserVotesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(uservote.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedUserVotesIDs(); len(nodes) > 0 && !_u.mutation.UserVotesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   component.UserVotesTable,
			Columns: []string{component.UserVotesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(uservote.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.UserVotesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   component.UserVotesTable,
			Columns: []string{component.UserVotesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(uservote.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Component{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{component.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
