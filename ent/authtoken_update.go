// Code generated by ent, DO NOT EDIT.

package ent

import (
	"base-website/ent/authtoken"
	"base-website/ent/predicate"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
)

// AuthTokenUpdate is the builder for updating AuthToken entities.
type AuthTokenUpdate struct {
	config
	hooks    []Hook
	mutation *AuthTokenMutation
}

// Where appends a list predicates to the AuthTokenUpdate builder.
func (_u *AuthTokenUpdate) Where(ps ...predicate.AuthToken) *AuthTokenUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetApplicationID sets the "application_id" field.
func (_u *AuthTokenUpdate) SetApplicationID(v string) *AuthTokenUpdate {
	_u.mutation.SetApplicationID(v)
	return _u
}

// SetNillableApplicationID sets the "application_id" field if the given value is not nil.
func (_u *AuthTokenUpdate) SetNillableApplicationID(v *string) *AuthTokenUpdate {
	if v != nil {
		_u.SetApplicationID(*v)
	}
	return _u
}

// SetSubject sets the "subject" field.
func (_u *AuthTokenUpdate) SetSubject(v string) *AuthTokenUpdate {
	_u.mutation.SetSubject(v)
	return _u
}

// SetNillableSubject sets the "subject" field if the given value is not nil.
func (_u *AuthTokenUpdate) SetNillableSubject(v *string) *AuthTokenUpdate {
	if v != nil {
		_u.SetSubject(*v)
	}
	return _u
}

// SetRefreshTokenID sets the "refresh_token_id" field.
func (_u *AuthTokenUpdate) SetRefreshTokenID(v string) *AuthTokenUpdate {
	_u.mutation.SetRefreshTokenID(v)
	return _u
}

// SetNillableRefreshTokenID sets the "refresh_token_id" field if the given value is not nil.
func (_u *AuthTokenUpdate) SetNillableRefreshTokenID(v *string) *AuthTokenUpdate {
	if v != nil {
		_u.SetRefreshTokenID(*v)
	}
	return _u
}

// SetAudience sets the "audience" field.
func (_u *AuthTokenUpdate) SetAudience(v []string) *AuthTokenUpdate {
	_u.mutation.SetAudience(v)
	return _u
}

// AppendAudience appends value to the "audience" field.
func (_u *AuthTokenUpdate) AppendAudience(v []string) *AuthTokenUpdate {
	_u.mutation.AppendAudience(v)
	return _u
}

// SetExpiration sets the "expiration" field.
func (_u *AuthTokenUpdate) SetExpiration(v time.Time) *AuthTokenUpdate {
	_u.mutation.SetExpiration(v)
	return _u
}

// SetNillableExpiration sets the "expiration" field if the given value is not nil.
func (_u *AuthTokenUpdate) SetNillableExpiration(v *time.Time) *AuthTokenUpdate {
	if v != nil {
		_u.SetExpiration(*v)
	}
	return _u
}

// SetScopes sets the "scopes" field.
func (_u *AuthTokenUpdate) SetScopes(v []string) *AuthTokenUpdate {
	_u.mutation.SetScopes(v)
	return _u
}

// AppendScopes appends value to the "scopes" field.
func (_u *AuthTokenUpdate) AppendScopes(v []string) *AuthTokenUpdate {
	_u.mutation.AppendScopes(v)
	return _u
}

// Mutation returns the AuthTokenMutation object of the builder.
func (_u *AuthTokenUpdate) Mutation() *AuthTokenMutation {
	return _u.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *AuthTokenUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *AuthTokenUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *AuthTokenUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *AuthTokenUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

func (_u *AuthTokenUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	_spec := sqlgraph.NewUpdateSpec(authtoken.Table, authtoken.Columns, sqlgraph.NewFieldSpec(authtoken.FieldID, field.TypeString))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.ApplicationID(); ok {
		_spec.SetField(authtoken.FieldApplicationID, field.TypeString, value)
	}
	if value, ok := _u.mutation.Subject(); ok {
		_spec.SetField(authtoken.FieldSubject, field.TypeString, value)
	}
	if value, ok := _u.mutation.RefreshTokenID(); ok {
		_spec.SetField(authtoken.FieldRefreshTokenID, field.TypeString, value)
	}
	if value, ok := _u.mutation.Audience(); ok {
		_spec.SetField(authtoken.FieldAudience, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedAudience(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, authtoken.FieldAudience, value)
		})
	}
	if value, ok := _u.mutation.Expiration(); ok {
		_spec.SetField(authtoken.FieldExpiration, field.TypeTime, value)
	}
	if value, ok := _u.mutation.Scopes(); ok {
		_spec.SetField(authtoken.FieldScopes, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedScopes(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, authtoken.FieldScopes, value)
		})
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{authtoken.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// AuthTokenUpdateOne is the builder for updating a single AuthToken entity.
type AuthTokenUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *AuthTokenMutation
}

// SetApplicationID sets the "application_id" field.
func (_u *AuthTokenUpdateOne) SetApplicationID(v string) *AuthTokenUpdateOne {
	_u.mutation.SetApplicationID(v)
	return _u
}

// SetNillableApplicationID sets the "application_id" field if the given value is not nil.
func (_u *AuthTokenUpdateOne) SetNillableApplicationID(v *string) *AuthTokenUpdateOne {
	if v != nil {
		_u.SetApplicationID(*v)
	}
	return _u
}

// SetSubject sets the "subject" field.
func (_u *AuthTokenUpdateOne) SetSubject(v string) *AuthTokenUpdateOne {
	_u.mutation.SetSubject(v)
	return _u
}

// SetNillableSubject sets the "subject" field if the given value is not nil.
func (_u *AuthTokenUpdateOne) SetNillableSubject(v *string) *AuthTokenUpdateOne {
	if v != nil {
		_u.SetSubject(*v)
	}
	return _u
}

// SetRefreshTokenID sets the "refresh_token_id" field.
func (_u *AuthTokenUpdateOne) SetRefreshTokenID(v string) *AuthTokenUpdateOne {
	_u.mutation.SetRefreshTokenID(v)
	return _u
}

// SetNillableRefreshTokenID sets the "refresh_token_id" field if the given value is not nil.
func (_u *AuthTokenUpdateOne) SetNillableRefreshTokenID(v *string) *AuthTokenUpdateOne {
	if v != nil {
		_u.SetRefreshTokenID(*v)
	}
	return _u
}

// SetAudience sets the "audience" field.
func (_u *AuthTokenUpdateOne) SetAudience(v []string) *AuthTokenUpdateOne {
	_u.mutation.SetAudience(v)
	return _u
}

// AppendAudience appends value to the "audience" field.
func (_u *AuthTokenUpdateOne) AppendAudience(v []string) *AuthTokenUpdateOne {
	_u.mutation.AppendAudience(v)
	return _u
}

// SetExpiration sets the "expiration" field.
func (_u *AuthTokenUpdateOne) SetExpiration(v time.Time) *AuthTokenUpdateOne {
	_u.mutation.SetExpiration(v)
	return _u
}

// SetNillableExpiration sets the "expiration" field if the given value is not nil.
func (_u *AuthTokenUpdateOne) SetNillableExpiration(v *time.Time) *AuthTokenUpdateOne {
	if v != nil {
		_u.SetExpiration(*v)
	}
	return _u
}

// SetScopes sets the "scopes" field.
func (_u *AuthTokenUpdateOne) SetScopes(v []string) *AuthTokenUpdateOne {
	_u.mutation.SetScopes(v)
	return _u
}

// AppendScopes appends value to the "scopes" field.
func (_u *AuthTokenUpdateOne) AppendScopes(v []string) *AuthTokenUpdateOne {
	_u.mutation.AppendScopes(v)
	return _u
}

// Mutation returns the AuthTokenMutation object of the builder.
func (_u *AuthTokenUpdateOne) Mutation() *AuthTokenMutation {
	return _u.mutation
}

// Where appends a list predicates to the AuthTokenUpdate builder.
func (_u *AuthTokenUpdateOne) Where(ps ...predicate.AuthToken) *AuthTokenUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *AuthTokenUpdateOne) Select(field string, fields ...string) *AuthTokenUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated AuthToken entity.
func (_u *AuthTokenUpdateOne) Save(ctx context.Context) (*AuthToken, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *AuthTokenUpdateOne) SaveX(ctx context.Context) *AuthToken {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *AuthTokenUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *AuthTokenUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

func (_u *AuthTokenUpdateOne) sqlSave(ctx context.Context) (_node *AuthToken, err error) {
	_spec := sqlgraph.NewUpdateSpec(authtoken.Table, authtoken.Columns, sqlgraph.NewFieldSpec(authtoken.FieldID, field.TypeString))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "AuthToken.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, authtoken.FieldID)
		for _, f := range fields {
			if !authtoken.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != authtoken.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.ApplicationID(); ok {
		_spec.SetField(authtoken.FieldApplicationID, field.TypeString, value)
	}
	if value, ok := _u.mutation.Subject(); ok {
		_spec.SetField(authtoken.FieldSubject, field.TypeString, value)
	}
	if value, ok := _u.mutation.RefreshTokenID(); ok {
		_spec.SetField(authtoken.FieldRefreshTokenID, field.TypeString, value)
	}
	if value, ok := _u.mutation.Audience(); ok {
		_spec.SetField(authtoken.FieldAudience, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedAudience(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, authtoken.FieldAudience, value)
		})
	}
	if value, ok := _u.mutation.Expiration(); ok {
		_spec.SetField(authtoken.FieldExpiration, field.TypeTime, value)
	}
	if value, ok := _u.mutation.Scopes(); ok {
		_spec.SetField(authtoken.FieldScopes, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedScopes(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, authtoken.FieldScopes, value)
		})
	}
	_node = &AuthToken{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{authtoken.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
