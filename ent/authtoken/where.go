// Code generated by ent, DO NOT EDIT.

package authtoken

import (
	"base-website/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id string) predicate.AuthToken {
	return predicate.AuthToken(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id string) predicate.AuthToken {
	return predicate.AuthToken(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id string) predicate.AuthToken {
	return predicate.AuthToken(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...string) predicate.AuthToken {
	return predicate.AuthToken(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...string) predicate.AuthToken {
	return predicate.AuthToken(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id string) predicate.AuthToken {
	return predicate.AuthToken(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id string) predicate.AuthToken {
	return predicate.AuthToken(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id string) predicate.AuthToken {
	return predicate.AuthToken(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id string) predicate.AuthToken {
	return predicate.AuthToken(sql.FieldLTE(FieldID, id))
}

// IDEqualFold applies the EqualFold predicate on the ID field.
func IDEqualFold(id string) predicate.AuthToken {
	return predicate.AuthToken(sql.FieldEqualFold(FieldID, id))
}

// IDContainsFold applies the ContainsFold predicate on the ID field.
func IDContainsFold(id string) predicate.AuthToken {
	return predicate.AuthToken(sql.FieldContainsFold(FieldID, id))
}

// ApplicationID applies equality check predicate on the "application_id" field. It's identical to ApplicationIDEQ.
func ApplicationID(v string) predicate.AuthToken {
	return predicate.AuthToken(sql.FieldEQ(FieldApplicationID, v))
}

// Subject applies equality check predicate on the "subject" field. It's identical to SubjectEQ.
func Subject(v string) predicate.AuthToken {
	return predicate.AuthToken(sql.FieldEQ(FieldSubject, v))
}

// RefreshTokenID applies equality check predicate on the "refresh_token_id" field. It's identical to RefreshTokenIDEQ.
func RefreshTokenID(v string) predicate.AuthToken {
	return predicate.AuthToken(sql.FieldEQ(FieldRefreshTokenID, v))
}

// Expiration applies equality check predicate on the "expiration" field. It's identical to ExpirationEQ.
func Expiration(v time.Time) predicate.AuthToken {
	return predicate.AuthToken(sql.FieldEQ(FieldExpiration, v))
}

// ApplicationIDEQ applies the EQ predicate on the "application_id" field.
func ApplicationIDEQ(v string) predicate.AuthToken {
	return predicate.AuthToken(sql.FieldEQ(FieldApplicationID, v))
}

// ApplicationIDNEQ applies the NEQ predicate on the "application_id" field.
func ApplicationIDNEQ(v string) predicate.AuthToken {
	return predicate.AuthToken(sql.FieldNEQ(FieldApplicationID, v))
}

// ApplicationIDIn applies the In predicate on the "application_id" field.
func ApplicationIDIn(vs ...string) predicate.AuthToken {
	return predicate.AuthToken(sql.FieldIn(FieldApplicationID, vs...))
}

// ApplicationIDNotIn applies the NotIn predicate on the "application_id" field.
func ApplicationIDNotIn(vs ...string) predicate.AuthToken {
	return predicate.AuthToken(sql.FieldNotIn(FieldApplicationID, vs...))
}

// ApplicationIDGT applies the GT predicate on the "application_id" field.
func ApplicationIDGT(v string) predicate.AuthToken {
	return predicate.AuthToken(sql.FieldGT(FieldApplicationID, v))
}

// ApplicationIDGTE applies the GTE predicate on the "application_id" field.
func ApplicationIDGTE(v string) predicate.AuthToken {
	return predicate.AuthToken(sql.FieldGTE(FieldApplicationID, v))
}

// ApplicationIDLT applies the LT predicate on the "application_id" field.
func ApplicationIDLT(v string) predicate.AuthToken {
	return predicate.AuthToken(sql.FieldLT(FieldApplicationID, v))
}

// ApplicationIDLTE applies the LTE predicate on the "application_id" field.
func ApplicationIDLTE(v string) predicate.AuthToken {
	return predicate.AuthToken(sql.FieldLTE(FieldApplicationID, v))
}

// ApplicationIDContains applies the Contains predicate on the "application_id" field.
func ApplicationIDContains(v string) predicate.AuthToken {
	return predicate.AuthToken(sql.FieldContains(FieldApplicationID, v))
}

// ApplicationIDHasPrefix applies the HasPrefix predicate on the "application_id" field.
func ApplicationIDHasPrefix(v string) predicate.AuthToken {
	return predicate.AuthToken(sql.FieldHasPrefix(FieldApplicationID, v))
}

// ApplicationIDHasSuffix applies the HasSuffix predicate on the "application_id" field.
func ApplicationIDHasSuffix(v string) predicate.AuthToken {
	return predicate.AuthToken(sql.FieldHasSuffix(FieldApplicationID, v))
}

// ApplicationIDEqualFold applies the EqualFold predicate on the "application_id" field.
func ApplicationIDEqualFold(v string) predicate.AuthToken {
	return predicate.AuthToken(sql.FieldEqualFold(FieldApplicationID, v))
}

// ApplicationIDContainsFold applies the ContainsFold predicate on the "application_id" field.
func ApplicationIDContainsFold(v string) predicate.AuthToken {
	return predicate.AuthToken(sql.FieldContainsFold(FieldApplicationID, v))
}

// SubjectEQ applies the EQ predicate on the "subject" field.
func SubjectEQ(v string) predicate.AuthToken {
	return predicate.AuthToken(sql.FieldEQ(FieldSubject, v))
}

// SubjectNEQ applies the NEQ predicate on the "subject" field.
func SubjectNEQ(v string) predicate.AuthToken {
	return predicate.AuthToken(sql.FieldNEQ(FieldSubject, v))
}

// SubjectIn applies the In predicate on the "subject" field.
func SubjectIn(vs ...string) predicate.AuthToken {
	return predicate.AuthToken(sql.FieldIn(FieldSubject, vs...))
}

// SubjectNotIn applies the NotIn predicate on the "subject" field.
func SubjectNotIn(vs ...string) predicate.AuthToken {
	return predicate.AuthToken(sql.FieldNotIn(FieldSubject, vs...))
}

// SubjectGT applies the GT predicate on the "subject" field.
func SubjectGT(v string) predicate.AuthToken {
	return predicate.AuthToken(sql.FieldGT(FieldSubject, v))
}

// SubjectGTE applies the GTE predicate on the "subject" field.
func SubjectGTE(v string) predicate.AuthToken {
	return predicate.AuthToken(sql.FieldGTE(FieldSubject, v))
}

// SubjectLT applies the LT predicate on the "subject" field.
func SubjectLT(v string) predicate.AuthToken {
	return predicate.AuthToken(sql.FieldLT(FieldSubject, v))
}

// SubjectLTE applies the LTE predicate on the "subject" field.
func SubjectLTE(v string) predicate.AuthToken {
	return predicate.AuthToken(sql.FieldLTE(FieldSubject, v))
}

// SubjectContains applies the Contains predicate on the "subject" field.
func SubjectContains(v string) predicate.AuthToken {
	return predicate.AuthToken(sql.FieldContains(FieldSubject, v))
}

// SubjectHasPrefix applies the HasPrefix predicate on the "subject" field.
func SubjectHasPrefix(v string) predicate.AuthToken {
	return predicate.AuthToken(sql.FieldHasPrefix(FieldSubject, v))
}

// SubjectHasSuffix applies the HasSuffix predicate on the "subject" field.
func SubjectHasSuffix(v string) predicate.AuthToken {
	return predicate.AuthToken(sql.FieldHasSuffix(FieldSubject, v))
}

// SubjectEqualFold applies the EqualFold predicate on the "subject" field.
func SubjectEqualFold(v string) predicate.AuthToken {
	return predicate.AuthToken(sql.FieldEqualFold(FieldSubject, v))
}

// SubjectContainsFold applies the ContainsFold predicate on the "subject" field.
func SubjectContainsFold(v string) predicate.AuthToken {
	return predicate.AuthToken(sql.FieldContainsFold(FieldSubject, v))
}

// RefreshTokenIDEQ applies the EQ predicate on the "refresh_token_id" field.
func RefreshTokenIDEQ(v string) predicate.AuthToken {
	return predicate.AuthToken(sql.FieldEQ(FieldRefreshTokenID, v))
}

// RefreshTokenIDNEQ applies the NEQ predicate on the "refresh_token_id" field.
func RefreshTokenIDNEQ(v string) predicate.AuthToken {
	return predicate.AuthToken(sql.FieldNEQ(FieldRefreshTokenID, v))
}

// RefreshTokenIDIn applies the In predicate on the "refresh_token_id" field.
func RefreshTokenIDIn(vs ...string) predicate.AuthToken {
	return predicate.AuthToken(sql.FieldIn(FieldRefreshTokenID, vs...))
}

// RefreshTokenIDNotIn applies the NotIn predicate on the "refresh_token_id" field.
func RefreshTokenIDNotIn(vs ...string) predicate.AuthToken {
	return predicate.AuthToken(sql.FieldNotIn(FieldRefreshTokenID, vs...))
}

// RefreshTokenIDGT applies the GT predicate on the "refresh_token_id" field.
func RefreshTokenIDGT(v string) predicate.AuthToken {
	return predicate.AuthToken(sql.FieldGT(FieldRefreshTokenID, v))
}

// RefreshTokenIDGTE applies the GTE predicate on the "refresh_token_id" field.
func RefreshTokenIDGTE(v string) predicate.AuthToken {
	return predicate.AuthToken(sql.FieldGTE(FieldRefreshTokenID, v))
}

// RefreshTokenIDLT applies the LT predicate on the "refresh_token_id" field.
func RefreshTokenIDLT(v string) predicate.AuthToken {
	return predicate.AuthToken(sql.FieldLT(FieldRefreshTokenID, v))
}

// RefreshTokenIDLTE applies the LTE predicate on the "refresh_token_id" field.
func RefreshTokenIDLTE(v string) predicate.AuthToken {
	return predicate.AuthToken(sql.FieldLTE(FieldRefreshTokenID, v))
}

// RefreshTokenIDContains applies the Contains predicate on the "refresh_token_id" field.
func RefreshTokenIDContains(v string) predicate.AuthToken {
	return predicate.AuthToken(sql.FieldContains(FieldRefreshTokenID, v))
}

// RefreshTokenIDHasPrefix applies the HasPrefix predicate on the "refresh_token_id" field.
func RefreshTokenIDHasPrefix(v string) predicate.AuthToken {
	return predicate.AuthToken(sql.FieldHasPrefix(FieldRefreshTokenID, v))
}

// RefreshTokenIDHasSuffix applies the HasSuffix predicate on the "refresh_token_id" field.
func RefreshTokenIDHasSuffix(v string) predicate.AuthToken {
	return predicate.AuthToken(sql.FieldHasSuffix(FieldRefreshTokenID, v))
}

// RefreshTokenIDEqualFold applies the EqualFold predicate on the "refresh_token_id" field.
func RefreshTokenIDEqualFold(v string) predicate.AuthToken {
	return predicate.AuthToken(sql.FieldEqualFold(FieldRefreshTokenID, v))
}

// RefreshTokenIDContainsFold applies the ContainsFold predicate on the "refresh_token_id" field.
func RefreshTokenIDContainsFold(v string) predicate.AuthToken {
	return predicate.AuthToken(sql.FieldContainsFold(FieldRefreshTokenID, v))
}

// ExpirationEQ applies the EQ predicate on the "expiration" field.
func ExpirationEQ(v time.Time) predicate.AuthToken {
	return predicate.AuthToken(sql.FieldEQ(FieldExpiration, v))
}

// ExpirationNEQ applies the NEQ predicate on the "expiration" field.
func ExpirationNEQ(v time.Time) predicate.AuthToken {
	return predicate.AuthToken(sql.FieldNEQ(FieldExpiration, v))
}

// ExpirationIn applies the In predicate on the "expiration" field.
func ExpirationIn(vs ...time.Time) predicate.AuthToken {
	return predicate.AuthToken(sql.FieldIn(FieldExpiration, vs...))
}

// ExpirationNotIn applies the NotIn predicate on the "expiration" field.
func ExpirationNotIn(vs ...time.Time) predicate.AuthToken {
	return predicate.AuthToken(sql.FieldNotIn(FieldExpiration, vs...))
}

// ExpirationGT applies the GT predicate on the "expiration" field.
func ExpirationGT(v time.Time) predicate.AuthToken {
	return predicate.AuthToken(sql.FieldGT(FieldExpiration, v))
}

// ExpirationGTE applies the GTE predicate on the "expiration" field.
func ExpirationGTE(v time.Time) predicate.AuthToken {
	return predicate.AuthToken(sql.FieldGTE(FieldExpiration, v))
}

// ExpirationLT applies the LT predicate on the "expiration" field.
func ExpirationLT(v time.Time) predicate.AuthToken {
	return predicate.AuthToken(sql.FieldLT(FieldExpiration, v))
}

// ExpirationLTE applies the LTE predicate on the "expiration" field.
func ExpirationLTE(v time.Time) predicate.AuthToken {
	return predicate.AuthToken(sql.FieldLTE(FieldExpiration, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.AuthToken) predicate.AuthToken {
	return predicate.AuthToken(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.AuthToken) predicate.AuthToken {
	return predicate.AuthToken(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.AuthToken) predicate.AuthToken {
	return predicate.AuthToken(sql.NotPredicates(p))
}
