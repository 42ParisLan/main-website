// Code generated by ent, DO NOT EDIT.

package ent

import (
	"base-website/ent/component"
	"base-website/ent/predicate"
	"base-website/ent/user"
	"base-website/ent/vote"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// VoteUpdate is the builder for updating Vote entities.
type VoteUpdate struct {
	config
	hooks    []Hook
	mutation *VoteMutation
}

// Where appends a list predicates to the VoteUpdate builder.
func (_u *VoteUpdate) Where(ps ...predicate.Vote) *VoteUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetTitle sets the "title" field.
func (_u *VoteUpdate) SetTitle(v string) *VoteUpdate {
	_u.mutation.SetTitle(v)
	return _u
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (_u *VoteUpdate) SetNillableTitle(v *string) *VoteUpdate {
	if v != nil {
		_u.SetTitle(*v)
	}
	return _u
}

// SetDescription sets the "description" field.
func (_u *VoteUpdate) SetDescription(v string) *VoteUpdate {
	_u.mutation.SetDescription(v)
	return _u
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (_u *VoteUpdate) SetNillableDescription(v *string) *VoteUpdate {
	if v != nil {
		_u.SetDescription(*v)
	}
	return _u
}

// ClearDescription clears the value of the "description" field.
func (_u *VoteUpdate) ClearDescription() *VoteUpdate {
	_u.mutation.ClearDescription()
	return _u
}

// SetVisible sets the "visible" field.
func (_u *VoteUpdate) SetVisible(v bool) *VoteUpdate {
	_u.mutation.SetVisible(v)
	return _u
}

// SetNillableVisible sets the "visible" field if the given value is not nil.
func (_u *VoteUpdate) SetNillableVisible(v *bool) *VoteUpdate {
	if v != nil {
		_u.SetVisible(*v)
	}
	return _u
}

// SetStartAt sets the "start_at" field.
func (_u *VoteUpdate) SetStartAt(v time.Time) *VoteUpdate {
	_u.mutation.SetStartAt(v)
	return _u
}

// SetNillableStartAt sets the "start_at" field if the given value is not nil.
func (_u *VoteUpdate) SetNillableStartAt(v *time.Time) *VoteUpdate {
	if v != nil {
		_u.SetStartAt(*v)
	}
	return _u
}

// SetEndAt sets the "end_at" field.
func (_u *VoteUpdate) SetEndAt(v time.Time) *VoteUpdate {
	_u.mutation.SetEndAt(v)
	return _u
}

// SetNillableEndAt sets the "end_at" field if the given value is not nil.
func (_u *VoteUpdate) SetNillableEndAt(v *time.Time) *VoteUpdate {
	if v != nil {
		_u.SetEndAt(*v)
	}
	return _u
}

// SetCreatedAt sets the "created_at" field.
func (_u *VoteUpdate) SetCreatedAt(v time.Time) *VoteUpdate {
	_u.mutation.SetCreatedAt(v)
	return _u
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (_u *VoteUpdate) SetNillableCreatedAt(v *time.Time) *VoteUpdate {
	if v != nil {
		_u.SetCreatedAt(*v)
	}
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *VoteUpdate) SetUpdatedAt(v time.Time) *VoteUpdate {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// AddComponentIDs adds the "components" edge to the Component entity by IDs.
func (_u *VoteUpdate) AddComponentIDs(ids ...int) *VoteUpdate {
	_u.mutation.AddComponentIDs(ids...)
	return _u
}

// AddComponents adds the "components" edges to the Component entity.
func (_u *VoteUpdate) AddComponents(v ...*Component) *VoteUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddComponentIDs(ids...)
}

// SetCreatorID sets the "creator" edge to the User entity by ID.
func (_u *VoteUpdate) SetCreatorID(id int) *VoteUpdate {
	_u.mutation.SetCreatorID(id)
	return _u
}

// SetCreator sets the "creator" edge to the User entity.
func (_u *VoteUpdate) SetCreator(v *User) *VoteUpdate {
	return _u.SetCreatorID(v.ID)
}

// Mutation returns the VoteMutation object of the builder.
func (_u *VoteUpdate) Mutation() *VoteMutation {
	return _u.mutation
}

// ClearComponents clears all "components" edges to the Component entity.
func (_u *VoteUpdate) ClearComponents() *VoteUpdate {
	_u.mutation.ClearComponents()
	return _u
}

// RemoveComponentIDs removes the "components" edge to Component entities by IDs.
func (_u *VoteUpdate) RemoveComponentIDs(ids ...int) *VoteUpdate {
	_u.mutation.RemoveComponentIDs(ids...)
	return _u
}

// RemoveComponents removes "components" edges to Component entities.
func (_u *VoteUpdate) RemoveComponents(v ...*Component) *VoteUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveComponentIDs(ids...)
}

// ClearCreator clears the "creator" edge to the User entity.
func (_u *VoteUpdate) ClearCreator() *VoteUpdate {
	_u.mutation.ClearCreator()
	return _u
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *VoteUpdate) Save(ctx context.Context) (int, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *VoteUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *VoteUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *VoteUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *VoteUpdate) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok {
		v := vote.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *VoteUpdate) check() error {
	if _u.mutation.CreatorCleared() && len(_u.mutation.CreatorIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Vote.creator"`)
	}
	return nil
}

func (_u *VoteUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(vote.Table, vote.Columns, sqlgraph.NewFieldSpec(vote.FieldID, field.TypeInt))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.Title(); ok {
		_spec.SetField(vote.FieldTitle, field.TypeString, value)
	}
	if value, ok := _u.mutation.Description(); ok {
		_spec.SetField(vote.FieldDescription, field.TypeString, value)
	}
	if _u.mutation.DescriptionCleared() {
		_spec.ClearField(vote.FieldDescription, field.TypeString)
	}
	if value, ok := _u.mutation.Visible(); ok {
		_spec.SetField(vote.FieldVisible, field.TypeBool, value)
	}
	if value, ok := _u.mutation.StartAt(); ok {
		_spec.SetField(vote.FieldStartAt, field.TypeTime, value)
	}
	if value, ok := _u.mutation.EndAt(); ok {
		_spec.SetField(vote.FieldEndAt, field.TypeTime, value)
	}
	if value, ok := _u.mutation.CreatedAt(); ok {
		_spec.SetField(vote.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(vote.FieldUpdatedAt, field.TypeTime, value)
	}
	if _u.mutation.ComponentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   vote.ComponentsTable,
			Columns: []string{vote.ComponentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(component.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedComponentsIDs(); len(nodes) > 0 && !_u.mutation.ComponentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   vote.ComponentsTable,
			Columns: []string{vote.ComponentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(component.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ComponentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   vote.ComponentsTable,
			Columns: []string{vote.ComponentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(component.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.CreatorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   vote.CreatorTable,
			Columns: []string{vote.CreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.CreatorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   vote.CreatorTable,
			Columns: []string{vote.CreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{vote.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// VoteUpdateOne is the builder for updating a single Vote entity.
type VoteUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *VoteMutation
}

// SetTitle sets the "title" field.
func (_u *VoteUpdateOne) SetTitle(v string) *VoteUpdateOne {
	_u.mutation.SetTitle(v)
	return _u
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (_u *VoteUpdateOne) SetNillableTitle(v *string) *VoteUpdateOne {
	if v != nil {
		_u.SetTitle(*v)
	}
	return _u
}

// SetDescription sets the "description" field.
func (_u *VoteUpdateOne) SetDescription(v string) *VoteUpdateOne {
	_u.mutation.SetDescription(v)
	return _u
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (_u *VoteUpdateOne) SetNillableDescription(v *string) *VoteUpdateOne {
	if v != nil {
		_u.SetDescription(*v)
	}
	return _u
}

// ClearDescription clears the value of the "description" field.
func (_u *VoteUpdateOne) ClearDescription() *VoteUpdateOne {
	_u.mutation.ClearDescription()
	return _u
}

// SetVisible sets the "visible" field.
func (_u *VoteUpdateOne) SetVisible(v bool) *VoteUpdateOne {
	_u.mutation.SetVisible(v)
	return _u
}

// SetNillableVisible sets the "visible" field if the given value is not nil.
func (_u *VoteUpdateOne) SetNillableVisible(v *bool) *VoteUpdateOne {
	if v != nil {
		_u.SetVisible(*v)
	}
	return _u
}

// SetStartAt sets the "start_at" field.
func (_u *VoteUpdateOne) SetStartAt(v time.Time) *VoteUpdateOne {
	_u.mutation.SetStartAt(v)
	return _u
}

// SetNillableStartAt sets the "start_at" field if the given value is not nil.
func (_u *VoteUpdateOne) SetNillableStartAt(v *time.Time) *VoteUpdateOne {
	if v != nil {
		_u.SetStartAt(*v)
	}
	return _u
}

// SetEndAt sets the "end_at" field.
func (_u *VoteUpdateOne) SetEndAt(v time.Time) *VoteUpdateOne {
	_u.mutation.SetEndAt(v)
	return _u
}

// SetNillableEndAt sets the "end_at" field if the given value is not nil.
func (_u *VoteUpdateOne) SetNillableEndAt(v *time.Time) *VoteUpdateOne {
	if v != nil {
		_u.SetEndAt(*v)
	}
	return _u
}

// SetCreatedAt sets the "created_at" field.
func (_u *VoteUpdateOne) SetCreatedAt(v time.Time) *VoteUpdateOne {
	_u.mutation.SetCreatedAt(v)
	return _u
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (_u *VoteUpdateOne) SetNillableCreatedAt(v *time.Time) *VoteUpdateOne {
	if v != nil {
		_u.SetCreatedAt(*v)
	}
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *VoteUpdateOne) SetUpdatedAt(v time.Time) *VoteUpdateOne {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// AddComponentIDs adds the "components" edge to the Component entity by IDs.
func (_u *VoteUpdateOne) AddComponentIDs(ids ...int) *VoteUpdateOne {
	_u.mutation.AddComponentIDs(ids...)
	return _u
}

// AddComponents adds the "components" edges to the Component entity.
func (_u *VoteUpdateOne) AddComponents(v ...*Component) *VoteUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddComponentIDs(ids...)
}

// SetCreatorID sets the "creator" edge to the User entity by ID.
func (_u *VoteUpdateOne) SetCreatorID(id int) *VoteUpdateOne {
	_u.mutation.SetCreatorID(id)
	return _u
}

// SetCreator sets the "creator" edge to the User entity.
func (_u *VoteUpdateOne) SetCreator(v *User) *VoteUpdateOne {
	return _u.SetCreatorID(v.ID)
}

// Mutation returns the VoteMutation object of the builder.
func (_u *VoteUpdateOne) Mutation() *VoteMutation {
	return _u.mutation
}

// ClearComponents clears all "components" edges to the Component entity.
func (_u *VoteUpdateOne) ClearComponents() *VoteUpdateOne {
	_u.mutation.ClearComponents()
	return _u
}

// RemoveComponentIDs removes the "components" edge to Component entities by IDs.
func (_u *VoteUpdateOne) RemoveComponentIDs(ids ...int) *VoteUpdateOne {
	_u.mutation.RemoveComponentIDs(ids...)
	return _u
}

// RemoveComponents removes "components" edges to Component entities.
func (_u *VoteUpdateOne) RemoveComponents(v ...*Component) *VoteUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveComponentIDs(ids...)
}

// ClearCreator clears the "creator" edge to the User entity.
func (_u *VoteUpdateOne) ClearCreator() *VoteUpdateOne {
	_u.mutation.ClearCreator()
	return _u
}

// Where appends a list predicates to the VoteUpdate builder.
func (_u *VoteUpdateOne) Where(ps ...predicate.Vote) *VoteUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *VoteUpdateOne) Select(field string, fields ...string) *VoteUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated Vote entity.
func (_u *VoteUpdateOne) Save(ctx context.Context) (*Vote, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *VoteUpdateOne) SaveX(ctx context.Context) *Vote {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *VoteUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *VoteUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *VoteUpdateOne) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok {
		v := vote.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *VoteUpdateOne) check() error {
	if _u.mutation.CreatorCleared() && len(_u.mutation.CreatorIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Vote.creator"`)
	}
	return nil
}

func (_u *VoteUpdateOne) sqlSave(ctx context.Context) (_node *Vote, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(vote.Table, vote.Columns, sqlgraph.NewFieldSpec(vote.FieldID, field.TypeInt))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Vote.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, vote.FieldID)
		for _, f := range fields {
			if !vote.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != vote.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.Title(); ok {
		_spec.SetField(vote.FieldTitle, field.TypeString, value)
	}
	if value, ok := _u.mutation.Description(); ok {
		_spec.SetField(vote.FieldDescription, field.TypeString, value)
	}
	if _u.mutation.DescriptionCleared() {
		_spec.ClearField(vote.FieldDescription, field.TypeString)
	}
	if value, ok := _u.mutation.Visible(); ok {
		_spec.SetField(vote.FieldVisible, field.TypeBool, value)
	}
	if value, ok := _u.mutation.StartAt(); ok {
		_spec.SetField(vote.FieldStartAt, field.TypeTime, value)
	}
	if value, ok := _u.mutation.EndAt(); ok {
		_spec.SetField(vote.FieldEndAt, field.TypeTime, value)
	}
	if value, ok := _u.mutation.CreatedAt(); ok {
		_spec.SetField(vote.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(vote.FieldUpdatedAt, field.TypeTime, value)
	}
	if _u.mutation.ComponentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   vote.ComponentsTable,
			Columns: []string{vote.ComponentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(component.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedComponentsIDs(); len(nodes) > 0 && !_u.mutation.ComponentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   vote.ComponentsTable,
			Columns: []string{vote.ComponentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(component.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ComponentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   vote.ComponentsTable,
			Columns: []string{vote.ComponentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(component.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.CreatorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   vote.CreatorTable,
			Columns: []string{vote.CreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.CreatorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   vote.CreatorTable,
			Columns: []string{vote.CreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Vote{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{vote.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
