// Code generated by ent, DO NOT EDIT.

package ent

import (
	"base-website/ent/component"
	"base-website/ent/vote"
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Component is the model entity for the Component schema.
type Component struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Description holds the value of the "description" field.
	Description string `json:"description,omitempty"`
	// ImageURL holds the value of the "image_url" field.
	ImageURL string `json:"image_url,omitempty"`
	// Color holds the value of the "color" field.
	Color string `json:"color,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ComponentQuery when eager-loading is set.
	Edges           ComponentEdges `json:"edges"`
	vote_components *int
	selectValues    sql.SelectValues
}

// ComponentEdges holds the relations/edges for other nodes in the graph.
type ComponentEdges struct {
	// Vote holds the value of the vote edge.
	Vote *Vote `json:"vote,omitempty"`
	// UserVotes holds the value of the user_votes edge.
	UserVotes []*UserVote `json:"user_votes,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// VoteOrErr returns the Vote value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ComponentEdges) VoteOrErr() (*Vote, error) {
	if e.Vote != nil {
		return e.Vote, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: vote.Label}
	}
	return nil, &NotLoadedError{edge: "vote"}
}

// UserVotesOrErr returns the UserVotes value or an error if the edge
// was not loaded in eager-loading.
func (e ComponentEdges) UserVotesOrErr() ([]*UserVote, error) {
	if e.loadedTypes[1] {
		return e.UserVotes, nil
	}
	return nil, &NotLoadedError{edge: "user_votes"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Component) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case component.FieldID:
			values[i] = new(sql.NullInt64)
		case component.FieldName, component.FieldDescription, component.FieldImageURL, component.FieldColor:
			values[i] = new(sql.NullString)
		case component.ForeignKeys[0]: // vote_components
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Component fields.
func (_m *Component) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case component.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			_m.ID = int(value.Int64)
		case component.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				_m.Name = value.String
			}
		case component.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				_m.Description = value.String
			}
		case component.FieldImageURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field image_url", values[i])
			} else if value.Valid {
				_m.ImageURL = value.String
			}
		case component.FieldColor:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field color", values[i])
			} else if value.Valid {
				_m.Color = value.String
			}
		case component.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field vote_components", value)
			} else if value.Valid {
				_m.vote_components = new(int)
				*_m.vote_components = int(value.Int64)
			}
		default:
			_m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Component.
// This includes values selected through modifiers, order, etc.
func (_m *Component) Value(name string) (ent.Value, error) {
	return _m.selectValues.Get(name)
}

// QueryVote queries the "vote" edge of the Component entity.
func (_m *Component) QueryVote() *VoteQuery {
	return NewComponentClient(_m.config).QueryVote(_m)
}

// QueryUserVotes queries the "user_votes" edge of the Component entity.
func (_m *Component) QueryUserVotes() *UserVoteQuery {
	return NewComponentClient(_m.config).QueryUserVotes(_m)
}

// Update returns a builder for updating this Component.
// Note that you need to call Component.Unwrap() before calling this method if this Component
// was returned from a transaction, and the transaction was committed or rolled back.
func (_m *Component) Update() *ComponentUpdateOne {
	return NewComponentClient(_m.config).UpdateOne(_m)
}

// Unwrap unwraps the Component entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (_m *Component) Unwrap() *Component {
	_tx, ok := _m.config.driver.(*txDriver)
	if !ok {
		panic("ent: Component is not a transactional entity")
	}
	_m.config.driver = _tx.drv
	return _m
}

// String implements the fmt.Stringer.
func (_m *Component) String() string {
	var builder strings.Builder
	builder.WriteString("Component(")
	builder.WriteString(fmt.Sprintf("id=%v, ", _m.ID))
	builder.WriteString("name=")
	builder.WriteString(_m.Name)
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(_m.Description)
	builder.WriteString(", ")
	builder.WriteString("image_url=")
	builder.WriteString(_m.ImageURL)
	builder.WriteString(", ")
	builder.WriteString("color=")
	builder.WriteString(_m.Color)
	builder.WriteByte(')')
	return builder.String()
}

// Components is a parsable slice of Component.
type Components []*Component
