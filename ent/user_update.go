// Code generated by ent, DO NOT EDIT.

package ent

import (
	"base-website/ent/predicate"
	"base-website/ent/user"
	"base-website/ent/uservote"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
)

// UserUpdate is the builder for updating User entities.
type UserUpdate struct {
	config
	hooks    []Hook
	mutation *UserMutation
}

// Where appends a list predicates to the UserUpdate builder.
func (_u *UserUpdate) Where(ps ...predicate.User) *UserUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetUsername sets the "username" field.
func (_u *UserUpdate) SetUsername(v string) *UserUpdate {
	_u.mutation.SetUsername(v)
	return _u
}

// SetNillableUsername sets the "username" field if the given value is not nil.
func (_u *UserUpdate) SetNillableUsername(v *string) *UserUpdate {
	if v != nil {
		_u.SetUsername(*v)
	}
	return _u
}

// SetFirstName sets the "first_name" field.
func (_u *UserUpdate) SetFirstName(v string) *UserUpdate {
	_u.mutation.SetFirstName(v)
	return _u
}

// SetNillableFirstName sets the "first_name" field if the given value is not nil.
func (_u *UserUpdate) SetNillableFirstName(v *string) *UserUpdate {
	if v != nil {
		_u.SetFirstName(*v)
	}
	return _u
}

// SetLastName sets the "last_name" field.
func (_u *UserUpdate) SetLastName(v string) *UserUpdate {
	_u.mutation.SetLastName(v)
	return _u
}

// SetNillableLastName sets the "last_name" field if the given value is not nil.
func (_u *UserUpdate) SetNillableLastName(v *string) *UserUpdate {
	if v != nil {
		_u.SetLastName(*v)
	}
	return _u
}

// SetEmail sets the "email" field.
func (_u *UserUpdate) SetEmail(v string) *UserUpdate {
	_u.mutation.SetEmail(v)
	return _u
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (_u *UserUpdate) SetNillableEmail(v *string) *UserUpdate {
	if v != nil {
		_u.SetEmail(*v)
	}
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *UserUpdate) SetUpdatedAt(v time.Time) *UserUpdate {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetPicture sets the "picture" field.
func (_u *UserUpdate) SetPicture(v string) *UserUpdate {
	_u.mutation.SetPicture(v)
	return _u
}

// SetNillablePicture sets the "picture" field if the given value is not nil.
func (_u *UserUpdate) SetNillablePicture(v *string) *UserUpdate {
	if v != nil {
		_u.SetPicture(*v)
	}
	return _u
}

// ClearPicture clears the value of the "picture" field.
func (_u *UserUpdate) ClearPicture() *UserUpdate {
	_u.mutation.ClearPicture()
	return _u
}

// SetKind sets the "kind" field.
func (_u *UserUpdate) SetKind(v user.Kind) *UserUpdate {
	_u.mutation.SetKind(v)
	return _u
}

// SetNillableKind sets the "kind" field if the given value is not nil.
func (_u *UserUpdate) SetNillableKind(v *user.Kind) *UserUpdate {
	if v != nil {
		_u.SetKind(*v)
	}
	return _u
}

// SetUsualFullName sets the "usual_full_name" field.
func (_u *UserUpdate) SetUsualFullName(v string) *UserUpdate {
	_u.mutation.SetUsualFullName(v)
	return _u
}

// SetNillableUsualFullName sets the "usual_full_name" field if the given value is not nil.
func (_u *UserUpdate) SetNillableUsualFullName(v *string) *UserUpdate {
	if v != nil {
		_u.SetUsualFullName(*v)
	}
	return _u
}

// SetUsualFirstName sets the "usual_first_name" field.
func (_u *UserUpdate) SetUsualFirstName(v string) *UserUpdate {
	_u.mutation.SetUsualFirstName(v)
	return _u
}

// SetNillableUsualFirstName sets the "usual_first_name" field if the given value is not nil.
func (_u *UserUpdate) SetNillableUsualFirstName(v *string) *UserUpdate {
	if v != nil {
		_u.SetUsualFirstName(*v)
	}
	return _u
}

// ClearUsualFirstName clears the value of the "usual_first_name" field.
func (_u *UserUpdate) ClearUsualFirstName() *UserUpdate {
	_u.mutation.ClearUsualFirstName()
	return _u
}

// SetRoles sets the "roles" field.
func (_u *UserUpdate) SetRoles(v []string) *UserUpdate {
	_u.mutation.SetRoles(v)
	return _u
}

// AppendRoles appends value to the "roles" field.
func (_u *UserUpdate) AppendRoles(v []string) *UserUpdate {
	_u.mutation.AppendRoles(v)
	return _u
}

// AddUserVoteIDs adds the "user_votes" edge to the UserVote entity by IDs.
func (_u *UserUpdate) AddUserVoteIDs(ids ...int) *UserUpdate {
	_u.mutation.AddUserVoteIDs(ids...)
	return _u
}

// AddUserVotes adds the "user_votes" edges to the UserVote entity.
func (_u *UserUpdate) AddUserVotes(v ...*UserVote) *UserUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddUserVoteIDs(ids...)
}

// Mutation returns the UserMutation object of the builder.
func (_u *UserUpdate) Mutation() *UserMutation {
	return _u.mutation
}

// ClearUserVotes clears all "user_votes" edges to the UserVote entity.
func (_u *UserUpdate) ClearUserVotes() *UserUpdate {
	_u.mutation.ClearUserVotes()
	return _u
}

// RemoveUserVoteIDs removes the "user_votes" edge to UserVote entities by IDs.
func (_u *UserUpdate) RemoveUserVoteIDs(ids ...int) *UserUpdate {
	_u.mutation.RemoveUserVoteIDs(ids...)
	return _u
}

// RemoveUserVotes removes "user_votes" edges to UserVote entities.
func (_u *UserUpdate) RemoveUserVotes(v ...*UserVote) *UserUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveUserVoteIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *UserUpdate) Save(ctx context.Context) (int, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *UserUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *UserUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *UserUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *UserUpdate) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok {
		v := user.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *UserUpdate) check() error {
	if v, ok := _u.mutation.Kind(); ok {
		if err := user.KindValidator(v); err != nil {
			return &ValidationError{Name: "kind", err: fmt.Errorf(`ent: validator failed for field "User.kind": %w`, err)}
		}
	}
	return nil
}

func (_u *UserUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(user.Table, user.Columns, sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.Username(); ok {
		_spec.SetField(user.FieldUsername, field.TypeString, value)
	}
	if value, ok := _u.mutation.FirstName(); ok {
		_spec.SetField(user.FieldFirstName, field.TypeString, value)
	}
	if value, ok := _u.mutation.LastName(); ok {
		_spec.SetField(user.FieldLastName, field.TypeString, value)
	}
	if value, ok := _u.mutation.Email(); ok {
		_spec.SetField(user.FieldEmail, field.TypeString, value)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(user.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := _u.mutation.Picture(); ok {
		_spec.SetField(user.FieldPicture, field.TypeString, value)
	}
	if _u.mutation.PictureCleared() {
		_spec.ClearField(user.FieldPicture, field.TypeString)
	}
	if value, ok := _u.mutation.Kind(); ok {
		_spec.SetField(user.FieldKind, field.TypeEnum, value)
	}
	if value, ok := _u.mutation.UsualFullName(); ok {
		_spec.SetField(user.FieldUsualFullName, field.TypeString, value)
	}
	if value, ok := _u.mutation.UsualFirstName(); ok {
		_spec.SetField(user.FieldUsualFirstName, field.TypeString, value)
	}
	if _u.mutation.UsualFirstNameCleared() {
		_spec.ClearField(user.FieldUsualFirstName, field.TypeString)
	}
	if value, ok := _u.mutation.Roles(); ok {
		_spec.SetField(user.FieldRoles, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedRoles(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, user.FieldRoles, value)
		})
	}
	if _u.mutation.UserVotesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.UserVotesTable,
			Columns: []string{user.UserVotesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(uservote.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedUserVotesIDs(); len(nodes) > 0 && !_u.mutation.UserVotesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.UserVotesTable,
			Columns: []string{user.UserVotesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(uservote.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.UserVotesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.UserVotesTable,
			Columns: []string{user.UserVotesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(uservote.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{user.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// UserUpdateOne is the builder for updating a single User entity.
type UserUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *UserMutation
}

// SetUsername sets the "username" field.
func (_u *UserUpdateOne) SetUsername(v string) *UserUpdateOne {
	_u.mutation.SetUsername(v)
	return _u
}

// SetNillableUsername sets the "username" field if the given value is not nil.
func (_u *UserUpdateOne) SetNillableUsername(v *string) *UserUpdateOne {
	if v != nil {
		_u.SetUsername(*v)
	}
	return _u
}

// SetFirstName sets the "first_name" field.
func (_u *UserUpdateOne) SetFirstName(v string) *UserUpdateOne {
	_u.mutation.SetFirstName(v)
	return _u
}

// SetNillableFirstName sets the "first_name" field if the given value is not nil.
func (_u *UserUpdateOne) SetNillableFirstName(v *string) *UserUpdateOne {
	if v != nil {
		_u.SetFirstName(*v)
	}
	return _u
}

// SetLastName sets the "last_name" field.
func (_u *UserUpdateOne) SetLastName(v string) *UserUpdateOne {
	_u.mutation.SetLastName(v)
	return _u
}

// SetNillableLastName sets the "last_name" field if the given value is not nil.
func (_u *UserUpdateOne) SetNillableLastName(v *string) *UserUpdateOne {
	if v != nil {
		_u.SetLastName(*v)
	}
	return _u
}

// SetEmail sets the "email" field.
func (_u *UserUpdateOne) SetEmail(v string) *UserUpdateOne {
	_u.mutation.SetEmail(v)
	return _u
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (_u *UserUpdateOne) SetNillableEmail(v *string) *UserUpdateOne {
	if v != nil {
		_u.SetEmail(*v)
	}
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *UserUpdateOne) SetUpdatedAt(v time.Time) *UserUpdateOne {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetPicture sets the "picture" field.
func (_u *UserUpdateOne) SetPicture(v string) *UserUpdateOne {
	_u.mutation.SetPicture(v)
	return _u
}

// SetNillablePicture sets the "picture" field if the given value is not nil.
func (_u *UserUpdateOne) SetNillablePicture(v *string) *UserUpdateOne {
	if v != nil {
		_u.SetPicture(*v)
	}
	return _u
}

// ClearPicture clears the value of the "picture" field.
func (_u *UserUpdateOne) ClearPicture() *UserUpdateOne {
	_u.mutation.ClearPicture()
	return _u
}

// SetKind sets the "kind" field.
func (_u *UserUpdateOne) SetKind(v user.Kind) *UserUpdateOne {
	_u.mutation.SetKind(v)
	return _u
}

// SetNillableKind sets the "kind" field if the given value is not nil.
func (_u *UserUpdateOne) SetNillableKind(v *user.Kind) *UserUpdateOne {
	if v != nil {
		_u.SetKind(*v)
	}
	return _u
}

// SetUsualFullName sets the "usual_full_name" field.
func (_u *UserUpdateOne) SetUsualFullName(v string) *UserUpdateOne {
	_u.mutation.SetUsualFullName(v)
	return _u
}

// SetNillableUsualFullName sets the "usual_full_name" field if the given value is not nil.
func (_u *UserUpdateOne) SetNillableUsualFullName(v *string) *UserUpdateOne {
	if v != nil {
		_u.SetUsualFullName(*v)
	}
	return _u
}

// SetUsualFirstName sets the "usual_first_name" field.
func (_u *UserUpdateOne) SetUsualFirstName(v string) *UserUpdateOne {
	_u.mutation.SetUsualFirstName(v)
	return _u
}

// SetNillableUsualFirstName sets the "usual_first_name" field if the given value is not nil.
func (_u *UserUpdateOne) SetNillableUsualFirstName(v *string) *UserUpdateOne {
	if v != nil {
		_u.SetUsualFirstName(*v)
	}
	return _u
}

// ClearUsualFirstName clears the value of the "usual_first_name" field.
func (_u *UserUpdateOne) ClearUsualFirstName() *UserUpdateOne {
	_u.mutation.ClearUsualFirstName()
	return _u
}

// SetRoles sets the "roles" field.
func (_u *UserUpdateOne) SetRoles(v []string) *UserUpdateOne {
	_u.mutation.SetRoles(v)
	return _u
}

// AppendRoles appends value to the "roles" field.
func (_u *UserUpdateOne) AppendRoles(v []string) *UserUpdateOne {
	_u.mutation.AppendRoles(v)
	return _u
}

// AddUserVoteIDs adds the "user_votes" edge to the UserVote entity by IDs.
func (_u *UserUpdateOne) AddUserVoteIDs(ids ...int) *UserUpdateOne {
	_u.mutation.AddUserVoteIDs(ids...)
	return _u
}

// AddUserVotes adds the "user_votes" edges to the UserVote entity.
func (_u *UserUpdateOne) AddUserVotes(v ...*UserVote) *UserUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddUserVoteIDs(ids...)
}

// Mutation returns the UserMutation object of the builder.
func (_u *UserUpdateOne) Mutation() *UserMutation {
	return _u.mutation
}

// ClearUserVotes clears all "user_votes" edges to the UserVote entity.
func (_u *UserUpdateOne) ClearUserVotes() *UserUpdateOne {
	_u.mutation.ClearUserVotes()
	return _u
}

// RemoveUserVoteIDs removes the "user_votes" edge to UserVote entities by IDs.
func (_u *UserUpdateOne) RemoveUserVoteIDs(ids ...int) *UserUpdateOne {
	_u.mutation.RemoveUserVoteIDs(ids...)
	return _u
}

// RemoveUserVotes removes "user_votes" edges to UserVote entities.
func (_u *UserUpdateOne) RemoveUserVotes(v ...*UserVote) *UserUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveUserVoteIDs(ids...)
}

// Where appends a list predicates to the UserUpdate builder.
func (_u *UserUpdateOne) Where(ps ...predicate.User) *UserUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *UserUpdateOne) Select(field string, fields ...string) *UserUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated User entity.
func (_u *UserUpdateOne) Save(ctx context.Context) (*User, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *UserUpdateOne) SaveX(ctx context.Context) *User {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *UserUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *UserUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *UserUpdateOne) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok {
		v := user.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *UserUpdateOne) check() error {
	if v, ok := _u.mutation.Kind(); ok {
		if err := user.KindValidator(v); err != nil {
			return &ValidationError{Name: "kind", err: fmt.Errorf(`ent: validator failed for field "User.kind": %w`, err)}
		}
	}
	return nil
}

func (_u *UserUpdateOne) sqlSave(ctx context.Context) (_node *User, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(user.Table, user.Columns, sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "User.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, user.FieldID)
		for _, f := range fields {
			if !user.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != user.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.Username(); ok {
		_spec.SetField(user.FieldUsername, field.TypeString, value)
	}
	if value, ok := _u.mutation.FirstName(); ok {
		_spec.SetField(user.FieldFirstName, field.TypeString, value)
	}
	if value, ok := _u.mutation.LastName(); ok {
		_spec.SetField(user.FieldLastName, field.TypeString, value)
	}
	if value, ok := _u.mutation.Email(); ok {
		_spec.SetField(user.FieldEmail, field.TypeString, value)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(user.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := _u.mutation.Picture(); ok {
		_spec.SetField(user.FieldPicture, field.TypeString, value)
	}
	if _u.mutation.PictureCleared() {
		_spec.ClearField(user.FieldPicture, field.TypeString)
	}
	if value, ok := _u.mutation.Kind(); ok {
		_spec.SetField(user.FieldKind, field.TypeEnum, value)
	}
	if value, ok := _u.mutation.UsualFullName(); ok {
		_spec.SetField(user.FieldUsualFullName, field.TypeString, value)
	}
	if value, ok := _u.mutation.UsualFirstName(); ok {
		_spec.SetField(user.FieldUsualFirstName, field.TypeString, value)
	}
	if _u.mutation.UsualFirstNameCleared() {
		_spec.ClearField(user.FieldUsualFirstName, field.TypeString)
	}
	if value, ok := _u.mutation.Roles(); ok {
		_spec.SetField(user.FieldRoles, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedRoles(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, user.FieldRoles, value)
		})
	}
	if _u.mutation.UserVotesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.UserVotesTable,
			Columns: []string{user.UserVotesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(uservote.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedUserVotesIDs(); len(nodes) > 0 && !_u.mutation.UserVotesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.UserVotesTable,
			Columns: []string{user.UserVotesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(uservote.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.UserVotesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.UserVotesTable,
			Columns: []string{user.UserVotesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(uservote.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &User{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{user.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
