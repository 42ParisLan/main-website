// Code generated by ent, DO NOT EDIT.

package component

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the component type in the database.
	Label = "component"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// FieldImageURL holds the string denoting the image_url field in the database.
	FieldImageURL = "image_url"
	// FieldColor holds the string denoting the color field in the database.
	FieldColor = "color"
	// EdgeVote holds the string denoting the vote edge name in mutations.
	EdgeVote = "vote"
	// EdgeUserVotes holds the string denoting the user_votes edge name in mutations.
	EdgeUserVotes = "user_votes"
	// Table holds the table name of the component in the database.
	Table = "components"
	// VoteTable is the table that holds the vote relation/edge.
	VoteTable = "components"
	// VoteInverseTable is the table name for the Vote entity.
	// It exists in this package in order to avoid circular dependency with the "vote" package.
	VoteInverseTable = "votes"
	// VoteColumn is the table column denoting the vote relation/edge.
	VoteColumn = "vote_components"
	// UserVotesTable is the table that holds the user_votes relation/edge.
	UserVotesTable = "user_votes"
	// UserVotesInverseTable is the table name for the UserVote entity.
	// It exists in this package in order to avoid circular dependency with the "uservote" package.
	UserVotesInverseTable = "user_votes"
	// UserVotesColumn is the table column denoting the user_votes relation/edge.
	UserVotesColumn = "component_user_votes"
)

// Columns holds all SQL columns for component fields.
var Columns = []string{
	FieldID,
	FieldName,
	FieldDescription,
	FieldImageURL,
	FieldColor,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "components"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"vote_components",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the Component queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByDescription orders the results by the description field.
func ByDescription(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDescription, opts...).ToFunc()
}

// ByImageURL orders the results by the image_url field.
func ByImageURL(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldImageURL, opts...).ToFunc()
}

// ByColor orders the results by the color field.
func ByColor(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldColor, opts...).ToFunc()
}

// ByVoteField orders the results by vote field.
func ByVoteField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newVoteStep(), sql.OrderByField(field, opts...))
	}
}

// ByUserVotesCount orders the results by user_votes count.
func ByUserVotesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newUserVotesStep(), opts...)
	}
}

// ByUserVotes orders the results by user_votes terms.
func ByUserVotes(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newUserVotesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newVoteStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(VoteInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, VoteTable, VoteColumn),
	)
}
func newUserVotesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(UserVotesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, UserVotesTable, UserVotesColumn),
	)
}
